{"version":3,"sources":["modules/UI/Overlay.tsx","common/states.ts","resources/catalogs/Materials.tsx","resources/catalogs/Textures.ts","resources/catalogs/Shaders.ts","samples/BasicDemo.tsx","resources/assets/img/sand.jpg","resources/assets/img/sand_norm.png"],"names":["InfoOverlay","sampleName","sampleDesc","className","id","CaseSelector","items","current","onSelect","value","onChange","evt","target","Object","keys","map","key","create","set","get","time","custom","Date","controls","setTime","customTime","setControls","ctrl","useSampleStates","CATALOG","textureLoader","THREE","buildTex","texImg","repeat","load","wrapS","wrapT","anisotropy","sand_norm","img_sand_norm","Color","uniforms","vertexShader","join","fragmentShader","Material","props","name","WATER","attach","opacity","transparent","color","SAND","side","metalness","bumpScale","img_sand","normalMap","TextureCatalog","SHADCOL","Shaders","extend","OrbitControls","TransformControls","Wrapper","gl","useThree","setClearColor","shadowMap","enabled","type","Controls","orbitRef","useRef","camera","state","useFrame","update","useEffect","ref","args","domElement","enableDamping","dampingFactor","rotateSpeed","MoveCtrl","object","transfCtrl","onMove","event","matrix","addEventListener","console","log","detach","removeEventListener","Lights","lt","clock","getElapsedTime","position","x","Math","sin","z","cos","intensity","angle","penumbra","castShadow","Helpers","size","Static","grp","plane","rotation-x","PI","receiveShadow","push","Moveable","useState","isSelected","setIsSelected","isSelectedRef","cubeRef","onClick","useCallback","e","stopPropagation","cubeMesh","useMemo","moveCtrl","gl2","module","exports"],"mappings":"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","file":"static/js/11.059c462f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./UI.css\";\n\n/**\n * An overlay to display basic information\n */\nexport const InfoOverlay = ({ sampleName, sampleDesc }: any) => {\n\n  return (\n    <>\n      <div className=\"overlay top centered\">\n        <div id=\"infoLabel\">{sampleName}</div>\n        <div id=\"description\">{sampleDesc}</div>\n      </div>\n    </>\n  );\n}\n\n/**\n * A dropdown menu to select a sample case (e.g. test case)\n * @param param0 case options + current caseId\n * export sample.caseNb in states\n */\nexport const CaseSelector = ({\n  items,\n  current,\n  onSelect\n}: {\n  items: any;\n  current: number;\n  onSelect: any;\n}) => {\n  // const setSample = useSampleStates(state => state.setSample);\n\n  return (\n    <>\n      <div className=\"overlay top inputBtn\" id=\"caseSelector\">\n        <select\n          id=\"testCases\"\n          value={current}\n          onChange={evt => onSelect(evt.target.value)}\n        >\n          {Object.keys(items).map(key => (\n            <option key={key} value={key}>\n              {items[key]}\n            </option>\n          ))}\n        </select>\n      </div>\n    </>\n  );\n};\n\n\n\n","import create from \"zustand\";\n// import { stateContext } from \"react-three-fiber\";\n\nconst [useSampleStates] = create((set, get) => ({\n    time: {\n        custom: new Date()\n    },\n    controls: {\n    },\n    setTime: (customTime: any) => { set({ ...get(), time: { custom: customTime } }) },\n    setControls: (ctrl: any) => set({ ...get(), controls: ctrl })\n}))\n\nexport { useSampleStates };","import React from \"react\";\nimport * as THREE from \"three\";\nimport * as TextureCatalog from \"./Textures\";\nimport * as Shaders from './Shaders';\nexport enum CATALOG {\n  WATER,\n  SAND,\n  SHADCOL\n}\nexport type MaterialProps = {\n  name: CATALOG,\n  repeat: number\n}\nexport function Material(props: MaterialProps) {\n  switch (props.name) {\n    case CATALOG.WATER:\n      return (\n        <meshStandardMaterial\n          attach=\"material\"\n          opacity={0.5}\n          transparent={true}\n          color={0xff0000}\n        />);\n    case CATALOG.SAND:\n      return (\n        <meshStandardMaterial\n          attach=\"material\"\n          opacity={0.5}\n          transparent={false}\n          color={0xffffff}\n          side={THREE.DoubleSide}\n          metalness={0.2}\n          bumpScale={0.0005}\n          map={TextureCatalog.sand(props.repeat)}\n          normalMap={TextureCatalog.sand_norm(props.repeat)}\n        />);\n    case CATALOG.SHADCOL:\n      return (<shaderMaterial\n        attach=\"material\"\n        vertexShader={Shaders.Color.vertexShader}\n        fragmentShader={Shaders.Color.fragmentShader}\n      />)\n  }\n}\n","import * as THREE from \"three\";\nimport img_sand from \"../assets/img/sand.jpg\";\nimport img_sand_norm from \"../assets/img/sand_norm.png\";\n\nconst textureLoader = new THREE.TextureLoader();\n\nconst buildTex = (texImg: string, repeat: number) => {\n  return textureLoader.load(texImg, (map: THREE.Texture) => {\n    map.wrapS = THREE.RepeatWrapping;\n    map.wrapT = THREE.RepeatWrapping;\n    map.anisotropy = 4;\n    map.repeat.set(repeat, repeat);\n    return map;\n  });\n};\n\nconst sand = (repeat: number) => {\n  return buildTex(img_sand, repeat);\n};\nconst sand_norm = (repeat: number) => {\n  return buildTex(img_sand_norm, repeat);\n};\n\nexport { sand, sand_norm };\n","// import { Vector4, Uniform } from \"three/build/three.module\";\n// import * as TextureCatalog from \"./TextureCatalog\";\n\nvar Color = {\n\n    uniforms: {\n    },\n\n    vertexShader: [\n        \"attribute vec3 color;\",\n        \"varying vec3 col;\",\n        \"void main()\",\n        \"{\",\n        \"   col = color;\",\n        \"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n        \"\tgl_Position = projectionMatrix * mvPosition;\",\n        \"}\"\n    ].join(\"\\n\"),\n\n    fragmentShader: [\n        \"in vec3 col;\",\n        \"void main( void ) {\",\n        \"\tgl_FragColor = vec4(col.r,col.g,col.b,1.0);\",\n        \"}\"\n    ].join(\"\\n\")\n\n};\n\nexport { Color};\n","///<reference path=\"../dts/misc-types-extend.d.ts\" />\nimport React, { useRef, useEffect, useCallback, useState, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { useFrame, extend, useThree, Canvas } from \"react-three-fiber\";\nimport { Material, CATALOG } from \"../resources/catalogs/Materials\";\nimport { useSampleStates } from \"../common/states\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { TransformControls } from \"three/examples/jsm/controls/TransformControls\";\nimport { InfoOverlay } from \"../modules/UI/Overlay\";\n\ndeclare global {\n    // eslint-disable-next-line @typescript-eslint/no-namespace\n    namespace JSX {\n        interface IntrinsicElements {\n            orbitControls: any;\n            transformControls: any;\n        }\n    }\n}\n\nextend({ OrbitControls })\nextend({ TransformControls })\n\nexport const Wrapper = (props: any) => {\n    const {\n        gl,                           // WebGL renderer\n        // scene,                        // Default scene\n        // camera,                       // Default camera\n        // size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n        // viewport,                     // Bounds of the viewport in 3d units + factor (size/viewport)\n        // aspect,                       // Aspect ratio (size.width / size.height)\n        // mouse,                        // Current 2D mouse coordinates\n        // clock,                        // THREE.Clock (useful for useFrame deltas)\n        // invalidate,                   // Invalidates a single frame (for <Canvas invalidateFrameloop />)\n        // intersect,                    // Calls onMouseMove handlers for objects underneath the cursor\n        // setDefaultCamera,             // Sets the default camera\n    } = useThree();\n\n    gl.setClearColor(0x000000);\n    gl.shadowMap.enabled = true;\n    gl.shadowMap.type = THREE.PCFSoftShadowMap;\n\n    return (<>\n\n    </>)\n}\n\nexport const Controls = () => {\n    const orbitRef: any = useRef();\n\n    const { camera, gl }: any = useThree()\n    const setControls = useSampleStates(state => state.setControls)\n\n    useFrame(() => {\n        orbitRef.current.update();\n    })\n\n    useEffect(() => {\n        setControls(orbitRef.current)\n\n    }, []);\n\n    return (\n        <>\n            <orbitControls ref={orbitRef} args={[camera, gl.domElement]} enableDamping dampingFactor={0.1} rotateSpeed={0.5} />\n        </>\n    )\n};\n\nexport const MoveCtrl =\n    // React.forwardRef(({ onChange, object }, objectRef) => {\n    ({ onChange, object }: any) => {\n        const controls = useSampleStates(state => state.controls);\n        const transfCtrl: any = useRef();\n        const { camera, gl }: any = useThree();\n\n        const onMove = (event: any) => {\n            if (onChange)\n                onChange(event.target.object.matrix)\n        }\n\n        useEffect(() => {\n            // disable dragging for main controls\n            transfCtrl.current.addEventListener('dragging-changed', (event: any) =>\n                controls.enabled = !event.value);\n            console.log(\"attach controled object\");\n            transfCtrl.current.attach(object);\n            transfCtrl.current.addEventListener('dragging-changed', onMove);\n\n        }, []);\n\n        // cleanup effect hook\n        useEffect(() => () => {\n            console.log(\"detach controled object\");\n            transfCtrl.current.detach();\n            transfCtrl.current.removeEventListener('dragging-changed', onMove);\n        }, []);\n\n        return <transformControls ref={transfCtrl} args={[camera, gl.domElement]} />\n    }//)\n\n\nexport const Lights = (props: any) => {\n    const lt: any = useRef();\n\n    useFrame((state) => {\n        const time = state.clock.getElapsedTime();\n        // mesh.current.rotation.y += 0.01;\n        lt.current.position.x = 50 * Math.sin(time / 2);\n        lt.current.position.z = 50 * Math.cos(time / 2);\n    });\n\n    return (<>\n        <spotLight ref={lt} intensity={1} position={[30, 30, 50]} angle={0.2} penumbra={1} castShadow />\n    </>)\n}\n\nexport const Helpers = (props: any) => {\n    return (<>\n        <gridHelper args={[props.size, 10]} />\n        <axesHelper args={[props.size / 2]} />\n    </>)\n}\n\nconst Static = () => {\n    var grp = [];\n\n    var plane = <mesh rotation-x={Math.PI / 2} receiveShadow>\n        <planeGeometry attach=\"geometry\" args={[50, 50]} />\n        <Material name={CATALOG.SAND} repeat={1} />\n    </mesh>\n\n    grp.push(plane);\n\n    return (<>\n        <group>{grp}</group>;\n    </>)\n}\n\nconst Moveable = () => {\n    const [isSelected, setIsSelected] = useState(false);\n    const isSelectedRef: any = useRef();\n    const cubeRef: any = useRef();\n\n    const onClick = useCallback(\n        e => {\n            e.stopPropagation();\n            setIsSelected(!isSelectedRef.current);\n        },\n        []\n    );\n\n    useEffect(() => { isSelectedRef.current = isSelected });\n\n    const cubeMesh = useMemo(() => <mesh\n        ref={cubeRef}\n        position={[0, 0, 0]}\n        castShadow\n        onClick={e => onClick(e)}\n    //   onPointerOver={e => onHover(e, true)}\n    //   onPointerOut={e => onHover(e, false)}\n    >\n        <boxBufferGeometry attach=\"geometry\" args={[10, 10, 10]} />\n        <Material name={CATALOG.SAND} repeat={1} />\n    </mesh>, [])\n\n    // assign move control if object is selected\n    const moveCtrl = isSelected ? <MoveCtrl onChange={null} object={cubeRef.current} /> : \"\";\n\n    return (<>\n        {cubeMesh}\n        {moveCtrl}\n    </>)\n}\n\nexport default ({ args }: any) => {\n    const {sampleName, sampleDesc} = args;\n    return (\n        <>\n            <InfoOverlay sampleName={sampleName} sampleDesc={sampleDesc} />\n            <Canvas gl2 camera={{ position: [15, 30, 50] }}\n            // onCreated={({ gl }) => ((gl.shadowMap.enabled = true), (gl.shadowMap.type = THREE.PCFSoftShadowMap))}>\n            >\n                <Wrapper />\n                <Lights />\n                <Helpers size={128} />\n                <Controls />\n                <Static />\n                <Moveable />\n            </Canvas>\n        </>\n    )\n};","module.exports = __webpack_public_path__ + \"static/media/sand.be1ebb92.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sand_norm.3d153e6a.png\";"],"sourceRoot":""}