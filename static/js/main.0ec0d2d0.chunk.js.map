{"version":3,"sources":["common/constants.ts","samples/index.ts","App.tsx","index.tsx"],"names":["SAMPLE_TYPE","CONTROL_TYPE","BasicDemo","tags","DEMO","desc","args","comp","lazy","ModelLoader","caseSelect","ModelLoadCustUrl","extAssetUrl","BoxSplitDemo","TestBoxSplit","TEST","TestRaycastHlp","HeightmapGenTool","TOOL","SAMPLES","Samples","samples","Object","entries","reduce","acc","itemName","item","console","log","App","basename","exact","path","component","LoadSample","WelcomePage","className","keys","map","sampleName","i","key","toString","to","params","argName","length","name","match","sample","query","URLSearchParams","useLocation","search","urlArgs","forEach","urlArgVal","get","undefined","sampleArgs","sampleDesc","Sample","fallback","WEBGL","isWebGL2Available","document","body","appendChild","getWebGL2ErrorMessage","render","getElementById"],"mappings":"ojBAAYA,EAMAC,E,mGANAD,O,eAAAA,I,eAAAA,I,gBAAAA,M,cAMAC,O,iBAAAA,I,0BAAAA,M,KCEZ,IAAMC,EAAY,CAChBC,KAAM,CAACH,EAAYI,MACnBC,KACE,wGAEFC,KAAM,GACNC,KAAMC,gBAAK,kBAAM,+DAEbC,EAAc,CAClBN,KAAM,CAACH,EAAYI,MACnBC,KAAM,wFACNC,KAAM,CAAEI,WAAY,GACpBH,KAAMC,gBAAK,kBAAM,qEAEbG,EAAmB,CACvBR,KAAM,CAACH,EAAYI,MACnBC,KAAM,gGACNC,KAAM,CAAEM,YAAa,wGACrBL,KAAMC,gBAAK,kBAAM,qEAEbK,EAAe,CACnBV,KAAM,CAACH,EAAYI,MACnBC,KAAM,kCACNC,KAAM,GACNC,KAAMC,gBAAK,kBAAM,8DAEbM,EAAe,CACnBX,KAAM,CAACH,EAAYe,MACnBV,KAAM,GACNC,KAAM,CAACI,WAAY,GACnBH,KAAMC,gBAAK,kBAAM,8DAEbQ,EAAiB,CACrBb,KAAM,CAACH,EAAYe,MACnBV,KAAM,4CACNC,KAAM,GACNC,KAAMC,gBAAK,kBAAM,8DAEbS,EAAmB,CACvBd,KAAM,CAACH,EAAYkB,MACnBb,KAAM,qDACNC,KAAM,CAACI,WAAY,GACnBH,KAAMC,gBAAK,kBAAM,gECtCbW,EAAeC,EACfC,EACJC,OAAOC,QAAQJ,GAASK,QACtB,SAACC,EAAD,0BAAOC,EAAP,KAAiBC,EAAjB,2BAAiCF,EAAjC,eAAuCC,EAAWC,MAClD,IAIJC,QAAQC,IAAIV,GAUL,IAAMW,EAAM,WACjB,OACE,oCACE,kBAAC,IAAD,CAAQC,SAAS,yBAEf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,WAAWC,UAAWC,IACxC,kBAAC,IAAD,CAAOF,KAAK,mBAAmBC,UAAWC,QAmBvCC,EAAc,WAEzB,OADAR,QAAQC,IAAIR,EAAO,WAEjB,yBAAKgB,UAAU,OACb,yBAAKA,UAAU,SACb,8CACA,6DAEF,6BACA,wEANF,IAMsD,6BACpD,4BAAKf,OAAOgB,KAAKjB,GACdkB,KAAI,SAACC,EAAiBC,GAAlB,OACH,wBAAIC,IAAKD,EAAEE,YACT,kBAAC,IAAD,CAAMC,GAAI,IAAMJ,GAzBRlC,EAyBgCe,EAAQmB,GAAYlC,KAxBvDgB,OAAOgB,KAAKhC,GAAMkB,QAAO,SAACqB,EAAQC,GAE/C,OAAOD,GADMA,EAAOE,OAAS,IAAM,KACZD,EAAU,IAAMxC,EAAKwC,KAC3C,MAqB2EN,IAzB7D,IAAClC,QAoCP6B,EAAa,SAAC,GAAoB,IAEzCa,EAFwC,EAAjBC,MAEVJ,OAAOK,OACpBC,EA/DG,IAAIC,gBAAgBC,cAAcC,QAkEnCC,EAAepC,EAAQ6B,GAAM1C,KAEnCgB,OAAOgB,KAAKiB,GAASC,SAAQ,SAACV,GAC5B,IAAMW,EAAYN,EAAMO,IAAIZ,QACVa,IAAdF,IAAyBF,EAAQT,GAAWW,MAGlD,IAAIG,EAAU,aACZpB,WAAYQ,EAEZa,WAAY1C,EAAQ6B,GAAM3C,MACvBkD,GAKCO,EAAS3C,EAAQ6B,GAAMzC,KAG7B,OAFAqB,QAAQC,IAAIiC,GAGV,kBAAC,WAAD,CAAUC,SAAU,MAClB,kBAACD,EAAD,CAAQxD,KAAI,eAAOsD,QCxGS,IAA9BI,IAAMC,qBACRC,SAASC,KAAKC,YAAYJ,IAAMK,yBAGlCC,iBAAO,kBAAC,EAAD,MAASJ,SAASK,eAAe,W","file":"static/js/main.0ec0d2d0.chunk.js","sourcesContent":["export enum SAMPLE_TYPE {\n  DEMO,\n  TEST,\n  TOOL\n}\n\nexport enum CONTROL_TYPE {\n  ORBIT,\n  TRANSFORM\n  // FLY\n}\n","import { lazy } from \"react\";\nimport { SAMPLE_TYPE } from \"../common/constants\";\n/** \n * Sample customization:\n * You can choose to get sample arguments from url params  \n * by putting all supported sample arguments in args\n*/\n\nconst BasicDemo = {\n  tags: [SAMPLE_TYPE.DEMO],\n  desc:\n    \"A demo showing basic scene setup with animation, lights, shadows, controls, ..\" +\n    \"click on box to move it\",\n  args: {},\n  comp: lazy(() => import(\"./BasicDemo\"))\n};\nconst ModelLoader = {\n  tags: [SAMPLE_TYPE.DEMO],\n  desc: \"For some models, please allow some time to load. You can see camera autofit on models\",\n  args: { caseSelect: 1 },\n  comp: lazy(() => import(\"./ModelLoader\"))\n};\nconst ModelLoadCustUrl = {\n  tags: [SAMPLE_TYPE.DEMO],\n  desc: \"shows how to preload a model from url parameter. model may take a while to load (1 min or so)\",\n  args: { extAssetUrl: \"https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/Sponza/glTF/Sponza.gltf\" },  // add a custom load url\n  comp: lazy(() => import(\"./ModelLoader\"))\n};\nconst BoxSplitDemo = {\n  tags: [SAMPLE_TYPE.DEMO],\n  desc: \"Press space key to toggle anim.\",\n  args: {},\n  comp: lazy(() => import(\"../samples/BoxSplitDemo\"))\n};\nconst TestBoxSplit = {\n  tags: [SAMPLE_TYPE.TEST],\n  desc: \"\",\n  args: {caseSelect: 0},\n  comp: lazy(() => import(\"../samples/BoxSplit.test\"))\n};\nconst TestRaycastHlp = {\n  tags: [SAMPLE_TYPE.TEST],\n  desc: \"Use select menu to switch between objects\",\n  args: {},\n  comp: lazy(() => import(\"../samples/RaycastHlp.test\"))\n};\nconst HeightmapGenTool = {\n  tags: [SAMPLE_TYPE.TOOL],\n  desc: \"Generates heightmaps from various height functions\",\n  args: {caseSelect: 0},\n  comp: lazy(() => import(\"../samples/Tools/HeightmapGen\"))\n};\n\nexport {\n  BasicDemo,\n  ModelLoader,\n  ModelLoadCustUrl,\n  BoxSplitDemo,\n  HeightmapGenTool,\n  TestBoxSplit,\n  TestRaycastHlp\n};\n","import React, { Suspense, useEffect } from \"react\";\nimport {\n  Link,\n  useLocation,\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useParams\n} from \"react-router-dom\";\nimport \"./App.css\";\nimport * as Samples from \"./samples\";\n// import { useSampleStates } from './common/states';\nconst SAMPLES: any = Samples;\nconst samples: any = //Object.entries(Samples).map(([name, sample]: any) => sample);\n  Object.entries(SAMPLES).reduce(\n    (acc, [itemName, item]) => ({ ...acc, [itemName]: item }),\n    {}\n  );\n\n// console.log(Object.entries(SAMPLES));\nconsole.log(SAMPLES);\n// A custom hook that builds on useLocation to parse\n// the query string for you.\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\n/**\n * route to sample path and support sampleId\n */\nexport const App = () => {\n  return (\n    <>\n      <Router basename=\"/three-react-template\">\n        {/* <Route path=\"/\" component={App} /> */}\n        <Switch>\n          <Route exact path=\"/\">\n            <WelcomePage />\n          </Route>\n          {/* <LoadSample sample={sample} /> */}\n          <Route exact path=\"/:sample\" component={LoadSample} />\n          <Route path=\"/:sample/:caseId\" component={LoadSample} />\n        </Switch>\n      </Router>\n    </>\n  );\n};\n\nconst addUrlArgs = (args: any) => {\n  let paramStr = Object.keys(args).reduce((params, argName): any => {\n    const pref = params.length ? \"&\" : \"?\";\n    return params + pref + argName + \"=\" + args[argName];\n  }, \"\");\n  return paramStr;\n}\n\n/**\n * List all availables samples in the sandbox\n * @param param0\n */\nexport const WelcomePage = () => {\n  console.log(samples['BasicDemo']);\n  return (\n    <div className=\"App\">\n      <div className=\"title\">\n        <h2>ThreeSandbox! </h2>\n        <h3>A playground for 3D projects</h3>\n      </div>\n      <hr />\n      <span>Sandbox contains the following samples</span> <br />\n      <ul>{Object.keys(samples)//.map(name => samples[name])\n        .map((sampleName: any, i: number) => (\n          <li key={i.toString()}>\n            <Link to={\"/\" + sampleName + addUrlArgs(samples[sampleName].args)}>{sampleName}</Link>\n          </li>\n        ))}</ul>\n    </div>\n  );\n};\n\n/**\n * Load a specific sample\n * @param param0\n */\nexport const LoadSample = ({ match }: any) => {\n  // const setSample = useSampleStates(state => state.setSample);\n  let name = match.params.sample;\n  let query = useQuery();\n  // let { caseId } = useParams();\n  // preload argument list from sample declaration\n  const urlArgs: any = SAMPLES[name].args;\n  // + fill from url provided params\n  Object.keys(urlArgs).forEach((argName: string) => {\n    const urlArgVal = query.get(argName);\n    if (urlArgVal !== undefined) urlArgs[argName] = urlArgVal;\n  })\n  // add to sample args\n  var sampleArgs = {\n    sampleName: name,\n    // type: Number(query.get(\"type\")),\n    sampleDesc: SAMPLES[name].desc,\n    ...urlArgs\n  };\n\n  // setSample(sample); // externalize to Sample States\n  // console.log(sample);\n  const Sample = SAMPLES[name].comp;\n  console.log(Sample);\n  // sample.type = item.tags[0];\n  return (\n    <Suspense fallback={null}>\n      <Sample args={{ ...sampleArgs }} />\n    </Suspense>\n  );\n};\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport \"./index.css\";\nimport \"./theme.css\";\nimport { WEBGL } from \"three/examples/jsm/WebGL.js\";\nimport { App } from \"./App\";\n\nif (WEBGL.isWebGL2Available() === false) {\n  document.body.appendChild(WEBGL.getWebGL2ErrorMessage());\n}\n\nrender(<App />, document.getElementById(\"root\"));\n\n// import ReactDOM from 'react-dom';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}