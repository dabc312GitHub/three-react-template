{"version":3,"sources":["modules/UI/Overlay.tsx","common/states.ts","resources/catalogs/Materials.tsx","resources/catalogs/Textures.ts","resources/catalogs/Shaders.ts","samples/BasicDemo.tsx","resources/assets/img/sand.jpg","resources/assets/img/sand_norm.png","resources/assets/models/Astronaut.glf","resources/assets/models/Horse.glb","resources/catalogs/Models.ts","samples/ModelLoader.tsx","modules/tools/CamUtils.ts"],"names":["InfoOverlay","sample","console","log","name","caseNb","className","id","CaseSelector","items","current","onSelect","value","onChange","evt","target","Object","keys","map","key","create","set","get","time","custom","Date","controls","setTime","customTime","setControls","ctrl","useSampleStates","CATALOG","textureLoader","THREE","buildTex","texImg","repeat","load","wrapS","wrapT","anisotropy","sand_norm","img_sand_norm","Color","uniforms","vertexShader","join","fragmentShader","Material","props","WATER","attach","opacity","transparent","color","SAND","side","metalness","bumpScale","img_sand","normalMap","TextureCatalog","SHADCOL","Shaders","extend","OrbitControls","TransformControls","Wrapper","gl","useThree","setClearColor","shadowMap","enabled","type","Controls","orbitRef","useRef","camera","state","useFrame","update","useEffect","ref","args","domElement","enableDamping","dampingFactor","rotateSpeed","MoveCtrl","object","transfCtrl","onMove","event","matrix","addEventListener","detach","removeEventListener","Lights","lt","clock","getElapsedTime","position","x","Math","sin","z","cos","intensity","angle","penumbra","castShadow","Helpers","size","Static","grp","plane","rotation-x","PI","receiveShadow","push","Moveable","useState","isSelected","setIsSelected","isSelectedRef","cubeRef","onClick","useCallback","e","stopPropagation","cubeMesh","useMemo","moveCtrl","gl2","module","exports","avocado","lantern","sponza","Asset","url","gltf","useLoader","GLTFLoader","cam","sce","scene","selection","fitOffset","box","Box3","expandByObject","getSize","Vector3","center","getCenter","maxSize","max","y","fitHeightDistance","atan","fov","fitWidthDistance","aspect","distance","direction","clone","sub","normalize","multiplyScalar","maxDistance","copy","near","far","updateProjectionMatrix","focusOnObjects","children","dispose","CustomUrl","onSubmitUrl","setUrl","onSubmit","preventDefault","MODELS","Models","ALL_CASES","assetUrl","setAssetUrl","currCase","setCurrCase","caseName","arg","undefined","case","caseId","parseInt","fallback"],"mappings":"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","file":"static/js/6.3ab04b55.chunk.js","sourcesContent":["import React from \"react\"\nimport { useSampleStates } from \"../../common/states\";\nimport './UI.css'\n\n/**\n * An overlay to display basic information\n */\nexport const InfoOverlay = ({ sample }: { sample: any }) => {\n    console.log(\"Sample: %s %s\", sample.name, sample.caseNb ? \"#\" + sample.caseNb : \"\");\n\n    return (<>\n        <div className=\"overlay\" id=\"info\">\n            <span >\n                {sample.name}\n            </span>\n        </div>\n    </>)\n}\n\n/**\n * A dropdown menu to select a sample case (e.g. test case)\n * @param param0 case options + current caseId\n * export sample.caseNb in states\n */\nexport const CaseSelector = ({ items, current, onSelect}: { items: any, current: number, onSelect: any }) => {\n    // const setSample = useSampleStates(state => state.setSample);\n\n    return (<>\n        <div className=\"overlay inputBtn\" id=\"caseSelector\">\n            <select id=\"testCases\" value={current} onChange={evt => onSelect(evt.target.value)}>\n                {Object.keys(items).map((key) =>\n                    <option key={key} value={key}>{items[key]}</option>\n                )}\n            </select>\n        </div>\n    </>)\n}","import create from \"zustand\";\n// import { stateContext } from \"react-three-fiber\";\n\nconst [useSampleStates] = create((set, get) => ({\n    time: {\n        custom: new Date()\n    },\n    controls: {\n    },\n    setTime: (customTime: any) => { set({ ...get(), time: { custom: customTime } }) },\n    setControls: (ctrl: any) => set({ ...get(), controls: ctrl })\n}))\n\nexport { useSampleStates };","import React from \"react\";\nimport * as THREE from \"three\";\nimport * as TextureCatalog from \"./Textures\";\nimport * as Shaders from './Shaders';\nexport enum CATALOG {\n  WATER,\n  SAND,\n  SHADCOL\n}\nexport type MaterialProps = {\n  name: CATALOG,\n  repeat: number\n}\nexport function Material(props: MaterialProps) {\n  switch (props.name) {\n    case CATALOG.WATER:\n      return (\n        <meshStandardMaterial\n          attach=\"material\"\n          opacity={0.5}\n          transparent={true}\n          color={0xff0000}\n        />);\n    case CATALOG.SAND:\n      return (\n        <meshStandardMaterial\n          attach=\"material\"\n          opacity={0.5}\n          transparent={false}\n          color={0xffffff}\n          side={THREE.DoubleSide}\n          metalness={0.2}\n          bumpScale={0.0005}\n          map={TextureCatalog.sand(props.repeat)}\n          normalMap={TextureCatalog.sand_norm(props.repeat)}\n        />);\n    case CATALOG.SHADCOL:\n      return (<shaderMaterial\n        attach=\"material\"\n        vertexShader={Shaders.Color.vertexShader}\n        fragmentShader={Shaders.Color.fragmentShader}\n      />)\n  }\n}\n","import * as THREE from 'three';\nimport img_sand from '../assets/img/sand.jpg';\nimport img_sand_norm from '../assets/img/sand_norm.png';\n\nvar textureLoader = new THREE.TextureLoader();\n\nvar buildTex = (texImg: string, repeat: number) => {\n    return textureLoader.load(texImg, (map: THREE.Texture) => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(repeat, repeat);\n        return map;\n    });\n}\n\nvar sand = (repeat: number) => { return buildTex(img_sand, repeat) };\nvar sand_norm = (repeat: number) => { return buildTex(img_sand_norm, repeat) };\n\nexport {sand, sand_norm};","// import { Vector4, Uniform } from \"three/build/three.module\";\n// import * as TextureCatalog from \"./TextureCatalog\";\n\nvar Color = {\n\n    uniforms: {\n    },\n\n    vertexShader: [\n        \"attribute vec3 color;\",\n        \"varying vec3 col;\",\n        \"void main()\",\n        \"{\",\n        \"   col = color;\",\n        \"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n        \"\tgl_Position = projectionMatrix * mvPosition;\",\n        \"}\"\n    ].join(\"\\n\"),\n\n    fragmentShader: [\n        \"in vec3 col;\",\n        \"void main( void ) {\",\n        \"\tgl_FragColor = vec4(col.r,col.g,col.b,1.0);\",\n        \"}\"\n    ].join(\"\\n\")\n\n};\n\nexport { Color};\n","///<reference path=\"../dts/misc-types-extend.d.ts\" />\nimport React, { useRef, useEffect, useCallback, useState, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { useFrame, extend, useThree, Canvas } from \"react-three-fiber\";\nimport { Material, CATALOG } from \"../resources/catalogs/Materials\";\nimport { useSampleStates } from \"../common/states\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { TransformControls } from \"three/examples/jsm/controls/TransformControls\";\nimport { InfoOverlay } from \"../modules/UI/Overlay\";\n\ndeclare global {\n    // eslint-disable-next-line @typescript-eslint/no-namespace\n    namespace JSX {\n        interface IntrinsicElements {\n            orbitControls: any;\n            transformControls: any;\n        }\n    }\n}\n\nextend({ OrbitControls })\nextend({ TransformControls })\n\nexport const Wrapper = (props: any) => {\n    const {\n        gl,                           // WebGL renderer\n        // scene,                        // Default scene\n        // camera,                       // Default camera\n        // size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n        // viewport,                     // Bounds of the viewport in 3d units + factor (size/viewport)\n        // aspect,                       // Aspect ratio (size.width / size.height)\n        // mouse,                        // Current 2D mouse coordinates\n        // clock,                        // THREE.Clock (useful for useFrame deltas)\n        // invalidate,                   // Invalidates a single frame (for <Canvas invalidateFrameloop />)\n        // intersect,                    // Calls onMouseMove handlers for objects underneath the cursor\n        // setDefaultCamera,             // Sets the default camera\n    } = useThree();\n\n    gl.setClearColor(0x000000);\n    gl.shadowMap.enabled = true;\n    gl.shadowMap.type = THREE.PCFSoftShadowMap;\n\n    return (<>\n\n    </>)\n}\n\nexport const Controls = () => {\n    const orbitRef: any = useRef();\n\n    const { camera, gl }: any = useThree()\n    const setControls = useSampleStates(state => state.setControls)\n\n    useFrame(() => {\n        orbitRef.current.update();\n    })\n\n    useEffect(() => {\n        setControls(orbitRef.current)\n\n    }, []);\n\n    return (\n        <>\n            <orbitControls ref={orbitRef} args={[camera, gl.domElement]} enableDamping dampingFactor={0.1} rotateSpeed={0.5} />\n        </>\n    )\n};\n\nexport const MoveCtrl =\n    // React.forwardRef(({ onChange, object }, objectRef) => {\n    ({ onChange, object }: any) => {\n        const controls = useSampleStates(state => state.controls);\n        const transfCtrl: any = useRef();\n        const { camera, gl }: any = useThree();\n\n        const onMove = (event: any) => {\n            if (onChange)\n                onChange(event.target.object.matrix)\n        }\n\n        useEffect(() => {\n            // disable dragging for main controls\n            transfCtrl.current.addEventListener('dragging-changed', (event: any) =>\n                controls.enabled = !event.value);\n            console.log(\"attach controled object\");\n            transfCtrl.current.attach(object);\n            transfCtrl.current.addEventListener('dragging-changed', onMove);\n\n        }, []);\n\n        // cleanup effect hook\n        useEffect(() => () => {\n            console.log(\"detach controled object\");\n            transfCtrl.current.detach();\n            transfCtrl.current.removeEventListener('dragging-changed', onMove);\n        }, []);\n\n        return <transformControls ref={transfCtrl} args={[camera, gl.domElement]} />\n    }//)\n\n\nexport const Lights = (props: any) => {\n    const lt: any = useRef();\n\n    useFrame((state) => {\n        const time = state.clock.getElapsedTime();\n        // mesh.current.rotation.y += 0.01;\n        lt.current.position.x = 50 * Math.sin(time / 2);\n        lt.current.position.z = 50 * Math.cos(time / 2);\n    });\n\n    return (<>\n        <spotLight ref={lt} intensity={1} position={[30, 30, 50]} angle={0.2} penumbra={1} castShadow />\n    </>)\n}\n\nexport const Helpers = (props: any) => {\n    return (<>\n        <gridHelper args={[props.size, 10]} />\n        <axesHelper args={[props.size / 2]} />\n    </>)\n}\n\nconst Static = () => {\n    var grp = [];\n\n    var plane = <mesh rotation-x={Math.PI / 2} receiveShadow>\n        <planeGeometry attach=\"geometry\" args={[50, 50]} />\n        <Material name={CATALOG.SAND} repeat={1} />\n    </mesh>\n\n    grp.push(plane);\n\n    return (<>\n        <group>{grp}</group>;\n    </>)\n}\n\nconst Moveable = () => {\n    const [isSelected, setIsSelected] = useState(false);\n    const isSelectedRef: any = useRef();\n    const cubeRef: any = useRef();\n\n    const onClick = useCallback(\n        e => {\n            e.stopPropagation();\n            setIsSelected(!isSelectedRef.current);\n        },\n        []\n    );\n\n    useEffect(() => { isSelectedRef.current = isSelected });\n\n    const cubeMesh = useMemo(() => <mesh\n        ref={cubeRef}\n        position={[0, 0, 0]}\n        castShadow\n        onClick={e => onClick(e)}\n    //   onPointerOver={e => onHover(e, true)}\n    //   onPointerOut={e => onHover(e, false)}\n    >\n        <boxBufferGeometry attach=\"geometry\" args={[10, 10, 10]} />\n        <Material name={CATALOG.SAND} repeat={1} />\n    </mesh>, [])\n\n    // assign move control if object is selected\n    const moveCtrl = isSelected ? <MoveCtrl onChange={null} object={cubeRef.current} /> : \"\";\n\n    return (<>\n        {cubeMesh}\n        {moveCtrl}\n    </>)\n}\n\nexport default ({ sample }: any) => {\n\n    return (\n        <>\n            <InfoOverlay sample={sample} />\n            <Canvas gl2 camera={{ position: [15, 30, 50] }}\n            // onCreated={({ gl }) => ((gl.shadowMap.enabled = true), (gl.shadowMap.type = THREE.PCFSoftShadowMap))}>\n            >\n                <Wrapper />\n                <Lights />\n                <Helpers size={128} />\n                <Controls />\n                <Static />\n                <Moveable />\n            </Canvas>\n        </>\n    )\n};","module.exports = __webpack_public_path__ + \"static/media/sand.be1ebb92.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sand_norm.3d153e6a.png\";","module.exports = __webpack_public_path__ + \"static/media/Astronaut.f3152ab1.glf\";","module.exports = __webpack_public_path__ + \"static/media/Horse.ebf4afeb.glb\";","///<reference path=\"../../dts/misc-types-extend.d.ts\" />\n\n// Internal\nimport astronaut from '../assets/models/Astronaut.glf';\nimport horse from '../assets/models/Horse.glb';\n\n// External\nconst avocado = \"https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/Avocado/glTF/Avocado.gltf\"\nconst lantern = \"https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/Lantern/glTF/Lantern.gltf\"\nconst sponza = \"https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/Sponza/glTF/Sponza.gltf\"\n// const suzanne = \"https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/Suzanne/glTF/Suzanne.gltf\"\n\n\n// const astronaut = \"/res\";\nexport { astronaut, horse, avocado, lantern, sponza };\n","///<reference path=\"../dts/misc-types-extend.d.ts\" />\nimport React, { Suspense, useEffect, ChangeEvent, FormEvent, useState } from \"react\";\nimport { Canvas, useThree } from \"react-three-fiber\";\nimport { InfoOverlay, CaseSelector } from \"../modules/UI/Overlay\";\nimport { Controls, Wrapper, Helpers } from \"./BasicDemo\";\n\nimport { useLoader } from 'react-three-fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport { useSampleStates } from \"../common/states\";\n\nimport * as Models from '../resources/catalogs/Models'\nimport { focusOnObjects } from \"../modules/tools/CamUtils\";\nimport { Scene } from \"three\";\n\nconst Asset = ({ url }: { url: string }) => {\n    const gltf = useLoader(GLTFLoader, url);\n    const ctrl = useSampleStates(state => state.controls);\n    const cam: any = useThree().camera;\n    const sce: Scene = useThree().scene;\n\n    useEffect(() => {\n        focusOnObjects([gltf.scene], 1.2, ctrl, cam);\n        console.log(sce.children[3].children[0])\n    })\n\n    return <primitive object={gltf.scene} dispose={null} />\n}\n\nconst CustomUrl = ({ onSubmitUrl }: any) => {\n    // enter an asset url here (local or external)\n    const [url, setUrl] = useState(\"\");\n    const handleChange = (event: any) => {\n        setUrl(event.target.value);\n    }\n    const handleSubmit = (event: FormEvent) => {\n        event.preventDefault();\n        onSubmitUrl(url);\n    }\n\n    return (<>\n        <form onSubmit={handleSubmit} className=\"overlay centered\">\n            <label>\n                {/* asset url  &nbsp; */}\n                <input type=\"url\" id=\"assetURL\" value={url ? url : \"\"} onChange={handleChange} />\n            &nbsp;&nbsp;\n            </label>\n            <input type=\"submit\" value=\"custom url\" className=\"inputBtn\" />\n        </form>\n    </>)\n}\n\nconst MODELS: any = Models;\nconst ALL_CASES = [\"...custom\", ...Object.keys(MODELS)];\n\n\nexport default ({ sample }: any) => {\n\n    const [assetUrl, setAssetUrl] = useState(\"\");\n    const [currCase, setCurrCase] = useState(1);\n\n    // const sample = useSampleStates(state => state.sample);   // get sample from global states instead of from props to subscribe updates\n\n    const onCaseChange = (caseId: any) => {\n        console.log(\"switch case to: \" + caseId);\n        setCurrCase(parseInt(caseId));\n    }\n    const onAssetUrlChange = (url: string) => {\n        console.log(\"asset url set to: \" + url)\n        setAssetUrl(url);\n    }\n\n    useEffect(() => {\n        const caseName: any = ALL_CASES[currCase];\n        const url = currCase > 0 ? MODELS[caseName] : sample.arg ? sample.arg : assetUrl;\n        setAssetUrl(url);\n    }, [currCase]);\n\n    useEffect(() => {\n        // check if custom case was provided\n        if (sample.case !== undefined && sample.case !== null && sample.case !== \"\") {\n            setCurrCase(sample.case);\n        }\n        // check custom asset passed through url arg\n        else if (sample.arg) {\n            setCurrCase(0);\n        }\n\n    }, [])\n\n    return (<>\n        <InfoOverlay sample={sample} />\n        {currCase === 0 && !sample.arg ? <CustomUrl onSubmitUrl={onAssetUrlChange} /> : \"\"}\n        {!sample.arg ? <CaseSelector items={ALL_CASES} current={currCase} onSelect={onCaseChange} /> : \"\"}\n        <Canvas camera={{ position: [100, 50, 100] }}>\n            <ambientLight intensity={2} />\n            <Helpers size={128} />\n            <Wrapper />\n            <Controls />\n            {assetUrl ?\n                <Suspense fallback={null}>\n                    <Asset url={assetUrl} />\n                </Suspense> : \"\"}\n        </Canvas>\n    </>)\n};","import { Vector3, PerspectiveCamera, Box3 } from \"three\";\n\nexport const smoothTransit = ()=>{\n\n}\n\nexport const focusOnObjects = (selection: any, fitOffset = 1.2, controls: any, camera: PerspectiveCamera) => {\n    // const camera: any = useThree().camera;\n    // const controls = orbitRef.current;\n    const box = new Box3();\n\n    for (const object of selection) box.expandByObject(object);\n\n    const size = box.getSize(new Vector3());\n    const center = box.getCenter(new Vector3());\n\n    const maxSize = Math.max(size.x, size.y, size.z);\n    const fitHeightDistance = maxSize / (2 * Math.atan(Math.PI * camera.fov / 360));\n    const fitWidthDistance = fitHeightDistance / camera.aspect;\n    const distance = fitOffset * Math.max(fitHeightDistance, fitWidthDistance);\n\n    const direction = controls.target.clone()\n        .sub(camera.position)\n        .normalize()\n        .multiplyScalar(distance);\n\n    controls.maxDistance = distance * 10;\n    controls.target.copy(center);\n\n    camera.near = distance / 100;\n    camera.far = distance * 100;\n    camera.updateProjectionMatrix();\n\n    camera.position.copy(controls.target).sub(direction);\n\n    controls.update();\n}"],"sourceRoot":""}