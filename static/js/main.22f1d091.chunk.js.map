{"version":3,"sources":["common/SampleStates.ts","common/constants.ts","samples/index.ts","App.tsx","index.tsx"],"names":["create","set","get","sample","name","caseNb","time","custom","Date","transfCtrl","setSample","props","setTime","customTime","setTransfCtrl","ctrl","useSampleStates","SAMPLE_TYPE","CONTROL_TYPE","BasicDemo","tags","DEMO","Component","lazy","BoxSplitDemo","TestBoxSplit","TEST","TestRaycastHlp","sampleItems","Object","entries","Samples","reduce","acc","item","App","exact","path","component","LoadSample","WelcomePage","items","keys","map","sampleName","i","key","toString","to","match","state","id","useParams","params","Sample","fallback","WEBGL","isWebGL2Available","document","body","appendChild","getWebGL2ErrorMessage","render","getElementById"],"mappings":"+LAG0BA,aAAO,SAACC,EAAKC,GAAN,MAAe,CAC5CC,OAAQ,CACJC,KAAM,GACNC,OAAQ,IAEZC,KAAM,CACFC,OAAQ,IAAIC,MAEhBC,WAAY,GAEZC,UAAW,SAACC,GAAD,OAAgBV,EAAI,eAAKC,IAAN,CAAaC,OAAO,eAAMD,IAAMC,OAAb,GAAyBQ,OAC1EC,QAAS,SAACC,GAAsBZ,EAAI,eAAKC,IAAN,CAAaI,KAAM,CAAEC,OAAQM,OAChEC,cAAe,SAACC,GAAD,OAAed,EAAI,eAAKC,IAAN,CAAaO,WAAYM,UAZvDC,E,iVCHKC,EAKAC,E,6FALAD,O,eAAAA,I,gBAAAA,M,cAKAC,O,iBAAAA,I,0BAAAA,M,KCFZ,IAAMC,EAAY,CAAEC,KAAM,CAACH,EAAYI,MAAOC,UAAWC,gBAAK,kBAAM,uDAC9DC,EAAe,CAAEJ,KAAM,CAACH,EAAYI,MAAOC,UAAWC,gBAAK,kBAAM,uDACjEE,EAAe,CAAEL,KAAM,CAACH,EAAYS,MAAOJ,UAAWC,gBAAK,kBAAM,uDACjEI,EAAiB,CAAEP,KAAM,CAACH,EAAYS,MAAOJ,UAAWC,gBAAK,kBAAM,uD,QCOnEK,EAAmBC,OAAOC,QAAQC,GACrCC,QAAO,SAACC,EAAD,0BAAO7B,EAAP,KAAa8B,EAAb,2BAA6BD,EAA7B,eAAmC7B,EAAO8B,MAAS,IAWtD,IAAMC,EAAM,WAEjB,OAAQ,oCACN,kBAAC,IAAD,KAEE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,eAAeC,UAAWC,IAC5C,kBAAC,IAAD,CAAOF,KAAK,mBAAmBC,UAAWC,QAUrCC,EAAc,WAEzB,IAAsBC,EAKtB,OACE,sFACwD,6BAAM,6BAC5D,yEAFF,IAEuD,6BAErD,6BAVkBA,EAUAb,EATbC,OAAOa,KAAKD,GAAOE,KAAI,SAACC,EAAYC,GAAb,OAAmB,wBAAIC,IAAKD,EAAEE,YAC1D,kBAAC,IAAD,CAAMC,GAAI,IAAMJ,GAAaA,WAkBtBL,EAAa,SAAC,GAAoB,IAAlBU,EAAiB,EAAjBA,MACrBvC,EAAYM,aAAgB,SAAAkC,GAAK,OAAIA,EAAMxC,aAI3CyC,EAAOC,cAAPD,GACFhD,EAAS,CACXC,KAAM6C,EAAMI,OAAOT,WAEnBO,GAAIA,GAGNzC,EAAUP,GAEV,IACMmD,EADU1B,EAAYzB,EAAOC,MACfkB,UAEpB,OACE,kBAAC,WAAD,CAAUiC,SAAU,MAClB,kBAACD,EAAD,CAAQnD,OAAQA,OCjFY,IAA9BqD,IAAMC,qBAENC,SAASC,KAAKC,YAAYJ,IAAMK,yBAIpCC,iBAAO,kBAAC,EAAD,MAASJ,SAASK,eAAe,W","file":"static/js/main.22f1d091.chunk.js","sourcesContent":["import create from \"zustand\";\n// import { stateContext } from \"react-three-fiber\";\n\nconst [useSampleStates] = create((set, get) => ({\n    sample: {\n        name: \"\",\n        caseNb: \"\"\n    },\n    time: {\n        custom: new Date()\n    },\n    transfCtrl: {\n    },\n    setSample: (props: any) => set({ ...get(), sample: {...(get().sample), ...props} }),\n    setTime: (customTime: any) => { set({ ...get(), time: { custom: customTime } }) },\n    setTransfCtrl: (ctrl: any) => set({ ...get(), transfCtrl: ctrl })\n}))\n\nexport { useSampleStates };","export enum SAMPLE_TYPE{\n    DEMO,\n    TEST\n}\n\nexport enum CONTROL_TYPE {\n    ORBIT,\n    TRANSFORM,\n    // FLY\n}","import { lazy } from 'react'\nimport { SAMPLE_TYPE } from '../common/constants';\n\nconst BasicDemo = { tags: [SAMPLE_TYPE.DEMO], Component: lazy(() => import('./BasicDemo')) };\nconst BoxSplitDemo = { tags: [SAMPLE_TYPE.DEMO], Component: lazy(() => import('../samples/BoxSplitDemo')) };\nconst TestBoxSplit = { tags: [SAMPLE_TYPE.TEST], Component: lazy(() => import('../samples/BoxSplit.test')) };\nconst TestRaycastHlp = { tags: [SAMPLE_TYPE.TEST], Component: lazy(() => import('../samples/RaycastHlp.test')) };\n\nexport {\n  BasicDemo,\n  BoxSplitDemo,\n  TestBoxSplit,\n  TestRaycastHlp,\n}","import React, { Suspense, useEffect } from 'react';\nimport {\n  Link,\n  useLocation,\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useParams\n} from \"react-router-dom\";\nimport './App.css';\nimport * as Samples from \"./samples\";\nimport { useSampleStates } from './common/SampleStates';\n\nconst sampleItems: any = Object.entries(Samples)\n  .reduce((acc, [name, item]) => ({ ...acc, [name]: item }), {})\n\n// A custom hook that builds on useLocation to parse\n// the query string for you.\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\n/**\n * route to sample path and support sampleId\n */\nexport const App = () => {\n\n  return (<>\n    <Router>\n      {/* <Route path=\"/\" component={App} /> */}\n      <Switch>\n        <Route exact path=\"/\">\n          <WelcomePage />\n        </Route>\n        {/* <LoadSample sample={sample} /> */}\n        <Route exact path=\"/:sampleName\" component={LoadSample} />\n        <Route path=\"/:sampleName/:id\" component={LoadSample} />\n      </Switch>\n    </Router>\n  </>);\n}\n\n/**\n * List all availables samples in the sandbox\n * @param param0 \n */\nexport const WelcomePage = () => {\n\n  const getItemsList = (items: {}) => {\n    return Object.keys(items).map((sampleName, i) => <li key={i.toString()}>\n      <Link to={\"/\" + sampleName}>{sampleName}</Link>\n    </li>);\n  };\n  return (\n    <div>\n      Welcome to ThreeSandbox! a playground for 3D projects <br /><br />\n      <span>Sandbox contains the following samples:</span> <br />\n\n      <ul>{getItemsList(sampleItems)}</ul>\n    </div>\n  )\n};\n\n/**\n * Load a specific sample\n * @param param0 \n * export sample in states\n */\nexport const LoadSample = ({ match }: any) => {\n  const setSample = useSampleStates(state => state.setSample);\n\n  // let query = useQuery();\n  // let id = query.get(\"id\");\n  let { id } = useParams();\n  var sample = {\n    name: match.params.sampleName,\n    // type: Number(query.get(\"type\")),\n    id: id,\n  }\n  // externalize sample in SampleStates\n  setSample(sample);\n\n  var item: any = sampleItems[sample.name];\n  const Sample = item.Component;\n  // sample.type = item.tags[0];\n  return (\n    <Suspense fallback={null}>\n      <Sample sample={sample} />\n    </Suspense>)\n};","import React from 'react';\nimport { render } from 'react-dom'\nimport './index.css';\nimport { WEBGL } from 'three/examples/jsm/WebGL.js';\nimport { App } from './App';\n\nif (WEBGL.isWebGL2Available() === false) {\n\n    document.body.appendChild(WEBGL.getWebGL2ErrorMessage());\n\n}\n\nrender(<App />, document.getElementById('root'));\n\n// import ReactDOM from 'react-dom';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();"],"sourceRoot":""}