{"version":3,"sources":["modules/UI/Overlay.tsx","common/states.ts","resources/catalogs/Materials.tsx","resources/catalogs/Textures.ts","resources/catalogs/Shaders.ts","samples/BasicDemo.tsx","resources/assets/img/sand.jpg","resources/assets/img/sand_norm.png","modules/helpers/BoxEntityCtrlHlp.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","modules/tools/BoxUtils.ts","samples/BoxSplit.test.tsx"],"names":["InfoOverlay","sampleName","sampleDesc","className","id","CaseSelector","items","current","onSelect","value","onChange","evt","target","Object","keys","map","key","create","set","get","time","custom","Date","controls","setTime","customTime","setControls","ctrl","useSampleStates","CATALOG","textureLoader","THREE","buildTex","texImg","repeat","load","wrapS","wrapT","anisotropy","sand_norm","img_sand_norm","Color","uniforms","vertexShader","join","fragmentShader","Material","props","name","WATER","attach","opacity","transparent","color","SAND","side","metalness","bumpScale","img_sand","normalMap","TextureCatalog","SHADCOL","Shaders","extend","OrbitControls","TransformControls","Wrapper","gl","useThree","setClearColor","shadowMap","enabled","type","Controls","orbitRef","useRef","camera","state","useFrame","update","useEffect","ref","args","domElement","enableDamping","dampingFactor","rotateSpeed","MoveCtrl","object","transfCtrl","onMove","event","matrix","addEventListener","console","log","detach","removeEventListener","Lights","lt","clock","getElapsedTime","position","x","Math","sin","z","cos","intensity","angle","penumbra","castShadow","Helpers","size","Static","grp","plane","rotation-x","PI","receiveShadow","push","Moveable","useState","isSelected","setIsSelected","isSelectedRef","cubeRef","onClick","useCallback","e","stopPropagation","cubeMesh","useMemo","moveCtrl","gl2","module","exports","BOX_SELECT_MODES","defaultStyle","default","alpha","ghostColor","ghostAlpha","hovered","selected","BoxEntityCtrlHlp","boxEnt","boxStyle","isHovered","setIsHovered","boxRef","ghostRef","boxDim","Vector3","box","getSize","boxCenter","getCenter","style","assign","onHover","setFromObject","onPointerUp","onPointerOver","onPointerOut","onWheel","toArray","_defineProperties","i","length","descriptor","enumerable","configurable","writable","defineProperty","BoxSplitter","rejected","Constructor","protoProps","staticProps","combination","targetVol","volume","reduce","sizeSum","y","round","this","checkDuplicate","candidates","volumeTarget","level","valid","filter","findIndex","box2","containsBox","clone","expandByScalar","intersectsBox","validBoxes","validBox","find","makeCombinations","checkValidity","intersectBox","min","combinationArr","combin2","dupe","forEach","found","equals","intersectBoxes","overlapBox","boxPts","pts","max","flat","arr","p","index","p2","splice","boxes","slice","Box3","expandByPoint","vol","emptySpace","volDiff","combinationCandidates","combin","sort","g1","g2","res","prototype","OverlapBoxStyle","SplitBoxesStyle","TestBase","initBoxes","splitBoxes","boxHelpers","boxSplitHelpers","TestCases","box1","split","intersect","currCase","setCurrCase","caseSelect","undefined","TestCase","elt","caseId","parseInt"],"mappings":"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","file":"static/js/7.a4358adb.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./UI.css\";\n\n/**\n * An overlay to display basic information\n */\nexport const InfoOverlay = ({ sampleName, sampleDesc }: any) => {\n\n  return (\n    <>\n      <div className=\"overlay top centered\">\n        <div id=\"infoLabel\">{sampleName}</div>\n        <div id=\"description\">{sampleDesc}</div>\n      </div>\n    </>\n  );\n}\n\n/**\n * A dropdown menu to select a sample case (e.g. test case)\n * @param param0 case options + current caseId\n * export sample.caseNb in states\n */\nexport const CaseSelector = ({\n  items,\n  current,\n  onSelect\n}: {\n  items: any;\n  current: number;\n  onSelect: any;\n}) => {\n  // const setSample = useSampleStates(state => state.setSample);\n\n  return (\n    <>\n      <div className=\"overlay top inputBtn\" id=\"caseSelector\">\n        <select\n          id=\"testCases\"\n          value={current}\n          onChange={evt => onSelect(evt.target.value)}\n        >\n          {Object.keys(items).map(key => (\n            <option key={key} value={key}>\n              {items[key]}\n            </option>\n          ))}\n        </select>\n      </div>\n    </>\n  );\n};\n\n\n\n","import create from \"zustand\";\n// import { stateContext } from \"react-three-fiber\";\n\nconst [useSampleStates] = create((set, get) => ({\n    time: {\n        custom: new Date()\n    },\n    controls: {\n    },\n    setTime: (customTime: any) => { set({ ...get(), time: { custom: customTime } }) },\n    setControls: (ctrl: any) => set({ ...get(), controls: ctrl })\n}))\n\nexport { useSampleStates };","import React from \"react\";\nimport * as THREE from \"three\";\nimport * as TextureCatalog from \"./Textures\";\nimport * as Shaders from './Shaders';\nexport enum CATALOG {\n  WATER,\n  SAND,\n  SHADCOL\n}\nexport type MaterialProps = {\n  name: CATALOG,\n  repeat: number\n}\nexport function Material(props: MaterialProps) {\n  switch (props.name) {\n    case CATALOG.WATER:\n      return (\n        <meshStandardMaterial\n          attach=\"material\"\n          opacity={0.5}\n          transparent={true}\n          color={0xff0000}\n        />);\n    case CATALOG.SAND:\n      return (\n        <meshStandardMaterial\n          attach=\"material\"\n          opacity={0.5}\n          transparent={false}\n          color={0xffffff}\n          side={THREE.DoubleSide}\n          metalness={0.2}\n          bumpScale={0.0005}\n          map={TextureCatalog.sand(props.repeat)}\n          normalMap={TextureCatalog.sand_norm(props.repeat)}\n        />);\n    case CATALOG.SHADCOL:\n      return (<shaderMaterial\n        attach=\"material\"\n        vertexShader={Shaders.Color.vertexShader}\n        fragmentShader={Shaders.Color.fragmentShader}\n      />)\n  }\n}\n","import * as THREE from \"three\";\nimport img_sand from \"../assets/img/sand.jpg\";\nimport img_sand_norm from \"../assets/img/sand_norm.png\";\n\nconst textureLoader = new THREE.TextureLoader();\n\nconst buildTex = (texImg: string, repeat: number) => {\n  return textureLoader.load(texImg, (map: THREE.Texture) => {\n    map.wrapS = THREE.RepeatWrapping;\n    map.wrapT = THREE.RepeatWrapping;\n    map.anisotropy = 4;\n    map.repeat.set(repeat, repeat);\n    return map;\n  });\n};\n\nconst sand = (repeat: number) => {\n  return buildTex(img_sand, repeat);\n};\nconst sand_norm = (repeat: number) => {\n  return buildTex(img_sand_norm, repeat);\n};\n\nexport { sand, sand_norm };\n","// import { Vector4, Uniform } from \"three/build/three.module\";\n// import * as TextureCatalog from \"./TextureCatalog\";\n\nvar Color = {\n\n    uniforms: {\n    },\n\n    vertexShader: [\n        \"attribute vec3 color;\",\n        \"varying vec3 col;\",\n        \"void main()\",\n        \"{\",\n        \"   col = color;\",\n        \"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n        \"\tgl_Position = projectionMatrix * mvPosition;\",\n        \"}\"\n    ].join(\"\\n\"),\n\n    fragmentShader: [\n        \"in vec3 col;\",\n        \"void main( void ) {\",\n        \"\tgl_FragColor = vec4(col.r,col.g,col.b,1.0);\",\n        \"}\"\n    ].join(\"\\n\")\n\n};\n\nexport { Color};\n","///<reference path=\"../dts/misc-types-extend.d.ts\" />\nimport React, { useRef, useEffect, useCallback, useState, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { useFrame, extend, useThree, Canvas } from \"react-three-fiber\";\nimport { Material, CATALOG } from \"../resources/catalogs/Materials\";\nimport { useSampleStates } from \"../common/states\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { TransformControls } from \"three/examples/jsm/controls/TransformControls\";\nimport { InfoOverlay } from \"../modules/UI/Overlay\";\n\ndeclare global {\n    // eslint-disable-next-line @typescript-eslint/no-namespace\n    namespace JSX {\n        interface IntrinsicElements {\n            orbitControls: any;\n            transformControls: any;\n        }\n    }\n}\n\nextend({ OrbitControls })\nextend({ TransformControls })\n\nexport const Wrapper = (props: any) => {\n    const {\n        gl,                           // WebGL renderer\n        // scene,                        // Default scene\n        // camera,                       // Default camera\n        // size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n        // viewport,                     // Bounds of the viewport in 3d units + factor (size/viewport)\n        // aspect,                       // Aspect ratio (size.width / size.height)\n        // mouse,                        // Current 2D mouse coordinates\n        // clock,                        // THREE.Clock (useful for useFrame deltas)\n        // invalidate,                   // Invalidates a single frame (for <Canvas invalidateFrameloop />)\n        // intersect,                    // Calls onMouseMove handlers for objects underneath the cursor\n        // setDefaultCamera,             // Sets the default camera\n    } = useThree();\n\n    gl.setClearColor(0x000000);\n    gl.shadowMap.enabled = true;\n    gl.shadowMap.type = THREE.PCFSoftShadowMap;\n\n    return (<>\n\n    </>)\n}\n\nexport const Controls = () => {\n    const orbitRef: any = useRef();\n\n    const { camera, gl }: any = useThree()\n    const setControls = useSampleStates(state => state.setControls)\n\n    useFrame(() => {\n        orbitRef.current.update();\n    })\n\n    useEffect(() => {\n        setControls(orbitRef.current)\n\n    }, []);\n\n    return (\n        <>\n            <orbitControls ref={orbitRef} args={[camera, gl.domElement]} enableDamping dampingFactor={0.1} rotateSpeed={0.5} />\n        </>\n    )\n};\n\nexport const MoveCtrl =\n    // React.forwardRef(({ onChange, object }, objectRef) => {\n    ({ onChange, object }: any) => {\n        const controls = useSampleStates(state => state.controls);\n        const transfCtrl: any = useRef();\n        const { camera, gl }: any = useThree();\n\n        const onMove = (event: any) => {\n            if (onChange)\n                onChange(event.target.object.matrix)\n        }\n\n        useEffect(() => {\n            // disable dragging for main controls\n            transfCtrl.current.addEventListener('dragging-changed', (event: any) =>\n                controls.enabled = !event.value);\n            console.log(\"attach controled object\");\n            transfCtrl.current.attach(object);\n            transfCtrl.current.addEventListener('dragging-changed', onMove);\n\n        }, []);\n\n        // cleanup effect hook\n        useEffect(() => () => {\n            console.log(\"detach controled object\");\n            transfCtrl.current.detach();\n            transfCtrl.current.removeEventListener('dragging-changed', onMove);\n        }, []);\n\n        return <transformControls ref={transfCtrl} args={[camera, gl.domElement]} />\n    }//)\n\n\nexport const Lights = (props: any) => {\n    const lt: any = useRef();\n\n    useFrame((state) => {\n        const time = state.clock.getElapsedTime();\n        // mesh.current.rotation.y += 0.01;\n        lt.current.position.x = 50 * Math.sin(time / 2);\n        lt.current.position.z = 50 * Math.cos(time / 2);\n    });\n\n    return (<>\n        <spotLight ref={lt} intensity={1} position={[30, 30, 50]} angle={0.2} penumbra={1} castShadow />\n    </>)\n}\n\nexport const Helpers = (props: any) => {\n    return (<>\n        <gridHelper args={[props.size, 10]} />\n        <axesHelper args={[props.size / 2]} />\n    </>)\n}\n\nconst Static = () => {\n    var grp = [];\n\n    var plane = <mesh rotation-x={Math.PI / 2} receiveShadow>\n        <planeGeometry attach=\"geometry\" args={[50, 50]} />\n        <Material name={CATALOG.SAND} repeat={1} />\n    </mesh>\n\n    grp.push(plane);\n\n    return (<>\n        <group>{grp}</group>;\n    </>)\n}\n\nconst Moveable = () => {\n    const [isSelected, setIsSelected] = useState(false);\n    const isSelectedRef: any = useRef();\n    const cubeRef: any = useRef();\n\n    const onClick = useCallback(\n        e => {\n            e.stopPropagation();\n            setIsSelected(!isSelectedRef.current);\n        },\n        []\n    );\n\n    useEffect(() => { isSelectedRef.current = isSelected });\n\n    const cubeMesh = useMemo(() => <mesh\n        ref={cubeRef}\n        position={[0, 0, 0]}\n        castShadow\n        onClick={e => onClick(e)}\n    //   onPointerOver={e => onHover(e, true)}\n    //   onPointerOut={e => onHover(e, false)}\n    >\n        <boxBufferGeometry attach=\"geometry\" args={[10, 10, 10]} />\n        <Material name={CATALOG.SAND} repeat={1} />\n    </mesh>, [])\n\n    // assign move control if object is selected\n    const moveCtrl = isSelected ? <MoveCtrl onChange={null} object={cubeRef.current} /> : \"\";\n\n    return (<>\n        {cubeMesh}\n        {moveCtrl}\n    </>)\n}\n\nexport default ({ args }: any) => {\n    const {sampleName, sampleDesc} = args;\n    return (\n        <>\n            <InfoOverlay sampleName={sampleName} sampleDesc={sampleDesc} />\n            <Canvas gl2 camera={{ position: [15, 30, 50] }}\n            // onCreated={({ gl }) => ((gl.shadowMap.enabled = true), (gl.shadowMap.type = THREE.PCFSoftShadowMap))}>\n            >\n                <Wrapper />\n                <Lights />\n                <Helpers size={128} />\n                <Controls />\n                <Static />\n                <Moveable />\n            </Canvas>\n        </>\n    )\n};","module.exports = __webpack_public_path__ + \"static/media/sand.be1ebb92.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sand_norm.3d153e6a.png\";","import React, {\n  useRef,\n  useState,\n  useEffect,\n} from \"react\";\nimport { Box3, Vector3, Color } from \"three\";\nimport { MoveCtrl } from \"../../samples/BasicDemo\";\n\nexport type BoxStyle = {\n  color: string,\n  alpha: number,\n  ghostColor: string,\n  ghostAlpha: number\n}\n\nexport type BoxEntity = {\n  box: Box3,\n  selected: Boolean\n}\n\nexport enum BOX_SELECT_MODES {\n  SINGLE,\n  MULTI,\n  DRAG,\n  DRAGMULTI,\n  ALLORNOT\n}\n\nconst defaultStyle = {\n  default: {\n    color: 'white',\n    alpha: 0.2,\n    ghostColor: 'white',\n    ghostAlpha: 0\n  },\n  hovered: {            // only affects unselected box\n    color: 'white',   // box color seems to have no impact here\n    alpha: 0.5,\n    ghostColor: 'brown',\n    ghostAlpha: 0.2\n  },\n  selected: {\n    color: 'orange',\n    alpha: 0.8,\n    ghostColor: 'green',\n    ghostAlpha: 0.4\n  }\n}\n\nexport const BoxEntityCtrlHlp = ({ boxEnt, onClick = () => { }, onChange = () => { }, boxStyle = defaultStyle }:\n  { boxEnt: BoxEntity, onClick?: any, onChange?: any, boxStyle?: any }) => {\n  const [isHovered, setIsHovered] = useState(true);\n  const boxRef: any = useRef();\n  const ghostRef: any = useRef();\n\n  const boxDim: any = new Vector3()\n  boxEnt.box.getSize(boxDim);\n  const boxCenter: any = new Vector3()\n  boxEnt.box.getCenter(boxCenter);\n\n  var style = { ...defaultStyle };\n  Object.assign(style, boxStyle); // fill missing custom style properties if provided\n\n  // color\n  const color = boxEnt.selected ? style.selected.color : style.default.color;\n  const alpha = boxEnt.selected ? style.selected.alpha : isHovered ? style.hovered.alpha : style.default.alpha;\n  const ghostColor = boxEnt.selected ? style.selected.ghostColor : style.default.ghostColor;\n  const ghostAlpha = boxEnt.selected ? style.selected.ghostAlpha : isHovered ? style.hovered.ghostAlpha : style.default.ghostAlpha;\n\n  // Events\n  const onHover = //useCallback(\n    (e: any, enabled: any) => {\n      e.stopPropagation();\n      setIsHovered(enabled);\n    }//,[isHovered]);\n\n  useEffect(() => {\n    boxRef.current.setFromObject(ghostRef.current);\n  })\n  const moveCtrl = boxEnt.selected && ghostRef.current ? <MoveCtrl /*ref={ghostRef}*/ onChange={onChange} object={ghostRef.current} /> : \"\";\n\n\n  return (\n    <>\n      <boxHelper ref={boxRef} >\n        <lineBasicMaterial attach='material' color={new Color(color)} transparent opacity={alpha} />\n      </boxHelper>\n      <mesh ref={ghostRef} attach=\"object\"\n        // visible={ghostAlpha > 0}\n        position={boxCenter}\n        onPointerUp={e => onClick(e)}\n        onPointerOver={e => onHover(e, true)}\n        onPointerOut={e => onHover(e, false)}\n        onWheel={() => console.log(\"wheel\")}\n      >\n        <boxBufferGeometry attach=\"geometry\" args={boxDim.toArray()} />\n        <meshStandardMaterial\n          attach=\"material\"\n          color={ghostColor}\n          transparent\n          opacity={ghostAlpha}\n        />\n      </mesh>\n      {moveCtrl}\n    </>\n  );\n};\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import { Box3, Vector3 } from 'three';\n\nexport class BoxSplitter {\n\n    rejected = [];\n    static rejected: any;\n\n    static checkValidity(combination: any[], targetVol: number) {\n        var volume = combination.reduce((sizeSum: number, box: Box3) => {\n            var size = new Vector3();\n            box.getSize(size);\n            return sizeSum + size.x * size.y * size.z;\n        }, 0);\n        if (Math.round(volume) === Math.round(targetVol)) {\n            return combination;\n        }\n        else {\n            // console.log(\"Discard volume\");\n            // store.dispatch({ type: \"DEBUG\", subtype: \"STORE_VAL\", key: \"boxCombination\", val: grp });\n            if (!this.rejected) this.rejected = [];\n            if (BoxSplitter.checkDuplicate(combination, this.rejected)) {\n                this.rejected.push(combination);\n            }\n            return null;\n        }\n    }\n\n    static makeCombinations(combination: any[],\n        candidates: any[],\n        volumeTarget: any,\n        level: number): Box3[] | null {\n        var valid = candidates.filter((box: any) => {\n            // remove overlapping boxes\n            var index = combination.findIndex((box2: Box3) => {\n                return box2.containsBox(box) || box2.clone().expandByScalar(-0.01).intersectsBox(box);\n            });\n            return index === -1;\n        });\n        if (valid && valid.length) {\n            var validBoxes: Box3[] | null = [];\n            var validBox = valid.find((box: any, i: any) => {\n                // if(level <= 2) console.log(\"level \"+level+\" testing box \"+i+\"/\"+valid.length);\n                validBoxes = BoxSplitter.makeCombinations([...combination, box], valid, volumeTarget, level + 1);\n                return validBoxes !== null;\n            });\n            return validBox ? [validBox, ...validBoxes] : null;\n        } else if (this.checkValidity(combination, volumeTarget)) {\n            return [];  // working case\n        } else {\n            return null;    // non working case\n        }\n    }\n\n    static checkIntersections(intersectBox: Box3) {\n        var size = new Vector3(0);\n        intersectBox.getSize(size);\n        // intersects only if all size are not null\n        return Math.min(...size.toArray());\n    }\n\n    static checkDuplicate(combination: any[], combinationArr: any[]) {\n        var duplicate = combinationArr.find((combin2: any[]) => {\n            var dupe = true;\n            combination.forEach((box: any) => {\n                var found = combin2.find((box2: { equals: (arg0: any) => any; }) => { return box2.equals(box) });\n                dupe = dupe && found;\n            });\n            return dupe;\n        })\n        return !duplicate;\n    }\n\n    // getBoxSplitLayout\n    static split(box: Box3, intersectBoxes: Box3[]) {\n        // check inputs\n        var notOverlapping = intersectBoxes.filter(overlapBox => !box.intersectsBox(overlapBox));\n        if (notOverlapping.length) {\n            console.log(\"NOT all boxes are overlapping => don't go further\");\n            return [];\n        } else {\n            var boxPtsArr = [box, ...intersectBoxes].map((box) => {\n                var pts = [];\n                pts.push(box.min.clone());\n                pts.push(new Vector3(box.max.x, box.min.y, box.min.z));\n                pts.push(new Vector3(box.max.x, box.min.y, box.max.z));\n                pts.push(new Vector3(box.min.x, box.min.y, box.max.z));\n                pts.push(new Vector3(box.min.x, box.max.y, box.min.z));\n                pts.push(new Vector3(box.max.x, box.max.y, box.min.z));\n                pts.push(box.max.clone());\n                pts.push(new Vector3(box.min.x, box.max.y, box.max.z));\n                return pts;\n            });\n\n            var boxPts: Vector3[] = boxPtsArr.flat().reduce((arr: Vector3[], p: Vector3) => {\n                var index = arr.findIndex((p2: any) => { return p.equals(p2) });\n                if (index === -1) return [...arr, p];\n                else {\n                    arr.splice(index, 1);\n                    return arr;\n                }\n            }, []);\n            var boxes: Box3[] = [];\n            boxPts.forEach((p, i) => {\n                var candidates = boxPts.slice(i).filter((p2) => {\n                    return (p.x !== p2.x && p.y !== p2.y && p.z !== p2.z);\n                });\n                candidates.forEach((p2) => {\n                    var box = new Box3();\n                    box.expandByPoint(p);\n                    box.expandByPoint(p2);\n                    var invalid = intersectBoxes.find((box2: Box3) => {\n                        return box.intersectsBox(box2.clone().expandByScalar(-0.1));\n                    });\n                    if (!invalid) boxes.push(box);\n                });\n            });\n\n            var size = new Vector3();\n            box.getSize(size);\n            var vol = size.x * size.y * size.z;\n            var emptySpace = intersectBoxes.reduce((volDiff: number, box: Box3) => {\n                box.getSize(size);\n                return volDiff - size.x * size.y * size.z;\n            }, vol);\n\n            var combinationCandidates: any[] = [];\n            boxes.forEach((box) => {\n                var combin = BoxSplitter.makeCombinations([box], boxes, emptySpace, 0);\n                if (combin) {\n                    combin = [box, ...combin];\n                    if (BoxSplitter.checkDuplicate(combin, combinationCandidates)) {\n                        combinationCandidates.push(combin);\n                    }\n                }\n            })\n            combinationCandidates.sort((g1, g2) => {\n                return (g1.length - g2.length)\n            })\n\n            var res = combinationCandidates[0];\n            if (!res) {\n                console.log(\"WARN No split found for intersection of \");\n                console.log(box)\n                console.log(\"with boxes: \");\n                console.log(intersectBoxes)\n                console.log(\"DEBUG => rejected combination:\");\n                console.log(this.rejected);\n                // return this.rejected;\n                return null;\n            }\n            return res;\n        }\n    }\n\n    static getRejected() {\n        return this.rejected;\n    }\n}","///<reference path=\"../dts/misc-types-extend.d.ts\" />\nimport React, { useEffect, useState } from \"react\";\nimport { BoxEntityCtrlHlp } from \"../modules/helpers/BoxEntityCtrlHlp\";\nimport { Box3, Vector3 } from \"three\";\nimport { BoxSplitter } from \"../modules/tools/BoxUtils\";\nimport { Helpers, Controls, Wrapper, Lights } from \"./BasicDemo\";\nimport { InfoOverlay, CaseSelector } from \"../modules/UI/Overlay\";\nimport { Canvas } from \"react-three-fiber\";\n\nconst OverlapBoxStyle = {\n    default: {\n        color: \"red\",\n        alpha: 1,\n        ghostColor: \"red\",\n        ghostAlpha: 0.1\n    }\n}\n\nconst SplitBoxesStyle = {\n    default: {\n        color: \"green\",\n        alpha: 1,\n        ghostColor: \"green\",\n        ghostAlpha: 0.1\n    }\n}\n\nconst TestBase = ({ initBoxes, splitBoxes }: { initBoxes: Box3[], splitBoxes: Box3[] }) => {\n\n    var boxHelpers = initBoxes.map((box: any, id: number) => {\n        const boxEnt = {\n            box: box,\n            selected: false,\n        }\n        return <BoxEntityCtrlHlp boxEnt={boxEnt} boxStyle={OverlapBoxStyle} />\n    })\n    var boxSplitHelpers = splitBoxes.map((box: any, id: number) => {\n        const boxEnt = {\n            box: box,\n            selected: false,\n        }\n        return <BoxEntityCtrlHlp boxEnt={boxEnt} boxStyle={SplitBoxesStyle} />\n    })\n\n    return (<>\n        {boxHelpers}\n        {boxSplitHelpers}\n    </>)\n}\n\n// TestCase #0\nconst SeparateBoxes = () => {\n\n    var min; var max;\n\n    min = new Vector3(0, 0, -15); max = new Vector3(50, 50, 15);\n    var box1 = new Box3(min, max);\n\n    min = new Vector3(0, 0, 30); max = new Vector3(50, 50, 60);\n    var box2 = new Box3(min, max);\n\n    var splitBoxes = BoxSplitter.split(box1, [box2.clone().intersect(box1)]);\n\n    return (<TestBase initBoxes={[box1, box2]} splitBoxes={splitBoxes} />)\n}\n\n// TestCase #1\nconst AdjacentBoxes = () => {\n    var min; var max;\n\n    min = new Vector3(-30, 0, 0); max = new Vector3(15, 50, 50);\n    var box1 = new Box3(min, max);\n\n    min = new Vector3(0, 0, 0); max = new Vector3(45, 50, 50);\n    var box2 = new Box3(min, max);\n\n    var splitBoxes = BoxSplitter.split(box1, [box2.intersect(box1)]);\n    return (<TestBase initBoxes={[box1, box2]} splitBoxes={splitBoxes} />)\n\n}\n\n// TestCase #2: one box inside another\nconst BoxInclusion = () => {\n    var min; var max;\n\n    min = new Vector3(-92, -16, 36); max = new Vector3(-36, 80, 92);\n    var box1 = new Box3(min, max);\n\n    min = new Vector3(-92, -6.399999999999999, 36); max = new Vector3(-36, 70.4, 92);\n    var box2 = new Box3(min, max);\n\n    var splitBoxes = BoxSplitter.split(box1, [box2.intersect(box1)]);\n    return (<TestBase initBoxes={[box1, box2]} splitBoxes={splitBoxes} />)\n\n}\n\nconst TestCases = [SeparateBoxes, AdjacentBoxes, BoxInclusion];\n\nexport default ({ args }: any) => {\n    const [currCase, setCurrCase] = useState(0);\n\n  const {sampleName, sampleDesc, caseSelect } = args;\n\n\n    const onCaseChange = (caseId: any) => {\n        console.log(\"switch case to: \" + caseId);\n        setCurrCase(parseInt(caseId));\n    }\n\n    useEffect(() => {\n        // check if custom case was provided\n        if (caseSelect !== undefined && caseSelect !== null && caseSelect !== \"\") {\n            setCurrCase(caseSelect);\n        }\n    }, [])\n\n    const TestCase = TestCases[currCase];\n    return (\n        <>\n            <InfoOverlay sampleName={sampleName} sampleDesc={sampleDesc} />\n            <CaseSelector items={TestCases.map(elt=>elt.name)} current={currCase}  onSelect={onCaseChange} />\n            <Canvas camera={{ position: [100, 50, 100] }}>\n                <ambientLight intensity={2} />\n                <Wrapper />\n                <Helpers size={128} />\n                <Controls />\n                <TestCase />\n            </Canvas>\n        </>\n    )\n};"],"sourceRoot":""}