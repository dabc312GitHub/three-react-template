{"version":3,"sources":["components/UI/Overlay.tsx","resources/assets/img/sand.jpg","resources/assets/img/sand_norm.png","resources/catalogs/Materials.tsx","resources/catalogs/Textures.ts","resources/catalogs/Shaders.ts","samples/BasicDemo.tsx","components/Helpers/RaycastHlp.tsx","samples/RaycastHlp.test.tsx"],"names":["InfoOverlay","sample","console","log","name","caseNb","className","id","CaseSelector","sampleCases","caseId","setSample","useSampleStates","state","value","onChange","evt","target","Object","keys","map","key","module","exports","CATALOG","textureLoader","THREE","buildTex","texImg","repeat","load","wrapS","wrapT","anisotropy","set","sand_norm","img_sand_norm","Color","uniforms","vertexShader","join","fragmentShader","Material","props","WATER","attach","opacity","transparent","color","SAND","side","metalness","bumpScale","img_sand","normalMap","TextureCatalog","SHADCOL","Shaders","extend","OrbitControls","TransformControls","Wrapper","gl","useThree","setClearColor","shadowMap","enabled","type","Controls","orbitRef","useRef","transfCtrlRef","camera","setTransfCtrl","useFrame","current","update","useEffect","addEventListener","event","ref","args","domElement","enableDamping","dampingFactor","rotateSpeed","Lights","lt","time","clock","getElapsedTime","position","x","Math","sin","z","cos","intensity","angle","penumbra","castShadow","Helpers","size","Static","grp","plane","rotation-x","PI","receiveShadow","push","Moveable","transfCtrl","onClick","useCallback","e","stopPropagation","object","cube","gl2","RAYCAST_OBJ","React","memo","input","POLYGON","buffAttrRef","useUpdate","vertices","face","a","b","c","forEach","faceInd","i","posAttr","geometry","getAttribute","setXYZ","getX","getY","getZ","needsUpdate","faceIndex","buffGeomRef","self","computeBoundingSphere","useMemo","Float32Array","onPointerDown","attachObject","count","array","itemSize","prev","next","TestCases","meshRef","useState","raycasted","setRaycasted","onHover","entering","undefined","onPointerMove","onPointerOver","onPointerOut","wireframe","index","TestCase"],"mappings":"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","file":"static/js/7.212c5b38.chunk.js","sourcesContent":["import React from \"react\"\nimport { useSampleStates } from \"../../common/SampleStates\";\nimport './UI.css'\n/**\n * An overlay to display basic information\n */\nexport const InfoOverlay = ({ sample }: { sample: any }) => {\n    console.log(\"Sample: %s %s\", sample.name, sample.caseNb ? \"#\" + sample.caseNb : \"\");\n\n    return (<>\n        <div className=\"overlay\" id=\"info\">\n            <span >\n                {sample.name}\n            </span>\n        </div>\n    </>)\n}\n\n/**\n * A dropdown menu to select a sample case (e.g. test case)\n * @param param0 case options + current caseId\n * export sample.caseNb in states\n */\nexport const CaseSelector = ({ sampleCases, caseId }: { sampleCases: any, caseId: number }) => {\n    const setSample = useSampleStates(state => state.setSample);\n\n    console.log(\"switch to case #\" + sampleCases[caseId].name)\n\n    return (<>\n        <div className=\"overlay\" id=\"caseSelector\">\n            <select id=\"testCases\" value={caseId} onChange={evt => setSample({ caseNb: evt.target.value })}>\n                {Object.keys(sampleCases).map((key) =>\n                    <option key={key} value={key}>{sampleCases[key].name}</option>\n                )}\n            </select>\n        </div>\n    </>)\n}","module.exports = __webpack_public_path__ + \"static/media/sand.be1ebb92.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sand_norm.3d153e6a.png\";","import React from \"react\";\nimport * as THREE from \"three\";\nimport * as TextureCatalog from \"./Textures\";\nimport * as Shaders from './Shaders';\nexport enum CATALOG {\n  WATER,\n  SAND,\n  SHADCOL\n}\nexport type MaterialProps = {\n  name: CATALOG,\n  repeat: number\n}\nexport function Material(props: MaterialProps) {\n  switch (props.name) {\n    case CATALOG.WATER:\n      return (\n        <meshStandardMaterial\n          attach=\"material\"\n          opacity={0.5}\n          transparent={true}\n          color={0xff0000}\n        />);\n    case CATALOG.SAND:\n      return (\n        <meshStandardMaterial\n          attach=\"material\"\n          opacity={0.5}\n          transparent={false}\n          color={0xffffff}\n          side={THREE.DoubleSide}\n          metalness={0.2}\n          bumpScale={0.0005}\n          map={TextureCatalog.sand(props.repeat)}\n          normalMap={TextureCatalog.sand_norm(props.repeat)}\n        />);\n    case CATALOG.SHADCOL:\n      return (<shaderMaterial\n        attach=\"material\"\n        vertexShader={Shaders.Color.vertexShader}\n        fragmentShader={Shaders.Color.fragmentShader}\n      />)\n  }\n}\n","import * as THREE from 'three';\nimport img_sand from '../assets/img/sand.jpg';\nimport img_sand_norm from '../assets/img/sand_norm.png';\n\nvar textureLoader = new THREE.TextureLoader();\n\nvar buildTex = (texImg: string, repeat: number) => {\n    return textureLoader.load(texImg, (map: THREE.Texture) => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(repeat, repeat);\n        return map;\n    });\n}\n\nvar sand = (repeat: number) => { return buildTex(img_sand, repeat) };\nvar sand_norm = (repeat: number) => { return buildTex(img_sand_norm, repeat) };\n\nexport {sand, sand_norm};","// import { Vector4, Uniform } from \"three/build/three.module\";\n// import * as TextureCatalog from \"./TextureCatalog\";\n\nvar Color = {\n\n    uniforms: {\n    },\n\n    vertexShader: [\n        \"attribute vec3 color;\",\n        \"varying vec3 col;\",\n        \"void main()\",\n        \"{\",\n        \"   col = color;\",\n        \"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n        \"\tgl_Position = projectionMatrix * mvPosition;\",\n        \"}\"\n    ].join(\"\\n\"),\n\n    fragmentShader: [\n        \"in vec3 col;\",\n        \"void main( void ) {\",\n        \"\tgl_FragColor = vec4(col.r,col.g,col.b,1.0);\",\n        \"}\"\n    ].join(\"\\n\")\n\n};\n\nexport { Color};\n","///<reference path=\"../dts/misc-types-extend.d.ts\" />\nimport React, { useRef, useEffect, useCallback } from \"react\";\nimport * as THREE from \"three\";\nimport { useFrame, extend, useThree, Canvas } from \"react-three-fiber\";\nimport { Material, CATALOG } from \"../resources/catalogs/Materials\";\nimport { useSampleStates } from \"../common/SampleStates\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { TransformControls } from \"three/examples/jsm/controls/TransformControls\";\nimport { InfoOverlay } from \"../components/UI/Overlay\";\n\ndeclare global {\n    // eslint-disable-next-line @typescript-eslint/no-namespace\n    namespace JSX {\n        interface IntrinsicElements {\n            orbitControls: any;\n            transformControls: any;\n        }\n    }\n}\n\nextend({ OrbitControls })\nextend({ TransformControls })\n\nexport const Wrapper = (props: any) => {\n    const {\n        gl,                           // WebGL renderer\n        // scene,                        // Default scene\n        // camera,                       // Default camera\n        // size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n        // viewport,                     // Bounds of the viewport in 3d units + factor (size/viewport)\n        // aspect,                       // Aspect ratio (size.width / size.height)\n        // mouse,                        // Current 2D mouse coordinates\n        // clock,                        // THREE.Clock (useful for useFrame deltas)\n        // invalidate,                   // Invalidates a single frame (for <Canvas invalidateFrameloop />)\n        // intersect,                    // Calls onMouseMove handlers for objects underneath the cursor\n        // setDefaultCamera,             // Sets the default camera\n    } = useThree();\n\n    gl.setClearColor(0x000000);\n    gl.shadowMap.enabled = true;\n    gl.shadowMap.type = THREE.PCFSoftShadowMap;\n\n    return (<>\n\n    </>)\n}\n\nexport const Controls = () => {\n    const orbitRef: any = useRef()\n    const transfCtrlRef: any = useRef()\n\n    const { camera, gl } = useThree()\n    const setTransfCtrl = useSampleStates(state => state.setTransfCtrl)\n\n    useFrame(() => {\n        orbitRef.current.update();\n    })\n\n    useEffect(() => {\n        setTransfCtrl(transfCtrlRef.current);\n        transfCtrlRef.current.addEventListener('dragging-changed', (event: any) =>\n            orbitRef.current.enabled = !event.value);\n    }, []);\n\n    return (\n        <>\n            <orbitControls ref={orbitRef} args={[camera, gl.domElement]} enableDamping dampingFactor={0.1} rotateSpeed={0.5} />\n            <transformControls ref={transfCtrlRef} args={[camera, gl.domElement]} />\n        </>\n    )\n};\n\nexport const Lights = (props: any) => {\n    const lt: any = useRef();\n\n    useFrame((state) => {\n        const time = state.clock.getElapsedTime();\n        // mesh.current.rotation.y += 0.01;\n        lt.current.position.x = 50 * Math.sin(time / 2);\n        lt.current.position.z = 50 * Math.cos(time / 2);\n    });\n\n    return (<>\n        <spotLight ref={lt} intensity={1} position={[30, 30, 50]} angle={0.2} penumbra={1} castShadow />\n    </>)\n}\n\nexport const Helpers = (props: any) => {\n    return (<>\n        <gridHelper args={[props.size, 10]} />\n        <axesHelper args={[props.size / 2]} />\n    </>)\n}\n\nconst Static = () => {\n    var grp = [];\n\n    var plane = <mesh rotation-x={Math.PI / 2} receiveShadow>\n        <planeGeometry attach=\"geometry\" args={[50, 50]} />\n        <Material name={CATALOG.SAND} repeat={1} />\n    </mesh>\n\n    grp.push(plane);\n\n    return (<>\n        <group>{grp}</group>;\n    </>)\n}\n\nconst Moveable = () => {\n    const transfCtrl = useSampleStates(state => state.transfCtrl);\n\n    const onClick = useCallback(\n        e => {\n            e.stopPropagation();\n            transfCtrl.attach(e.object);\n        },\n        [transfCtrl]\n    );\n\n    var grp = [];\n\n    var cube = <mesh\n        // ref={mesh}\n        position={[0, 0, 0]}\n        castShadow\n        onClick={e => onClick(e)}\n    //   onPointerOver={e => onHover(e, true)}\n    //   onPointerOut={e => onHover(e, false)}\n    >\n        <boxBufferGeometry attach=\"geometry\" args={[10, 10, 10]} />\n        <Material name={CATALOG.SAND} repeat={1} />\n    </mesh>\n\n    grp.push(cube);\n\n    return (<>\n        <group>{grp}</group>;\n    </>)\n}\n\nexport default ({ sample }: any) => {\n\n    return (\n        <>\n            <InfoOverlay sample={sample} />\n            <Canvas gl2 camera={{ position: [15, 30, 50] }}\n            // onCreated={({ gl }) => ((gl.shadowMap.enabled = true), (gl.shadowMap.type = THREE.PCFSoftShadowMap))}>\n            >\n                <Wrapper />\n                <Lights />\n                <Helpers size={128} />\n                <Controls />\n                <Static />\n                <Moveable />\n            </Canvas>\n        </>\n    )\n};","import React, { useMemo } from \"react\";\nimport * as THREE from 'three'\nimport { BufferGeometry, BufferAttribute } from \"three\";\nimport { useUpdate } from \"react-three-fiber\";\n\nexport enum RAYCAST_OBJ {\n    POINT,\n    POLYGON\n}\n\nconst RaycastHlp = ({ input, type = RAYCAST_OBJ.POLYGON, onClick }: { input: any, type?: RAYCAST_OBJ, onClick?: any }) => {\n    // const [locked, setLocked]: any = useState();  // internal state for lock\n    // const lockedRef = useRef(locked);\n\n    // useEffect(()=>{\n    //     lockedRef.current = locked;\n    // })\n\n    const buffAttrRef = useUpdate(\n        (vertices: BufferAttribute) => {\n            if (input.face) {\n                [input.face.a, input.face.b, input.face.c].forEach((faceInd, i) => {\n                    const posAttr = input.object.geometry.getAttribute(\"position\");\n                    vertices.setXYZ(i, posAttr.getX(faceInd), posAttr.getY(faceInd), posAttr.getZ(faceInd));\n                });\n            }\n            vertices.needsUpdate = true;    // TODO: check why stays undefined\n            // console.log(input.faceIndex);\n        }, [input.faceIndex] // execute only if these properties change\n    )\n    const buffGeomRef = useUpdate((self: BufferGeometry) => {\n        // mandatory for onClick to work and cursor to be visible everywhere\n        self.computeBoundingSphere();\n    }, [input.faceIndex]);\n\n    // first time init\n    var vertices = useMemo(() => new Float32Array(9), [])\n    // console.log(input.faceIndex);\n\n    return (\n        <mesh onPointerDown={onClick ? onClick : null}>\n            <bufferGeometry ref={buffGeomRef} attach=\"geometry\">\n                <bufferAttribute ref={buffAttrRef} attachObject={['attributes', 'position']} count={3} array={vertices} itemSize={3} />\n            </bufferGeometry>\n            <meshBasicMaterial attach=\"material\" color=\"red\" transparent opacity={0.4} side={THREE.DoubleSide} />\n        </mesh>\n    );\n}\n// avoid unnecessary refresh\nconst compare = (prev: any, next: any) => {\n    return prev.input && prev.input.face && (prev.input.faceIndex === next.input.faceIndex);\n}\n\nexport default React.memo(RaycastHlp, compare)","///<reference path=\"../dts/misc-types-extend.d.ts\" />\nimport React, { useRef, useEffect, useCallback, useState } from \"react\";\nimport { extend, Canvas } from \"react-three-fiber\";\nimport RaycastHLP from '../components/Helpers/RaycastHlp'\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { TransformControls } from \"three/examples/jsm/controls/TransformControls\";\nimport { InfoOverlay, CaseSelector } from \"../components/UI/Overlay\";\nimport { Controls } from \"./BasicDemo\";\nimport { useSampleStates } from \"../common/SampleStates\";\n\ndeclare global {\n    // eslint-disable-next-line @typescript-eslint/no-namespace\n    namespace JSX {\n        interface IntrinsicElements {\n            orbitControls: any;\n            transformControls: any;\n        }\n    }\n}\n\nextend({ OrbitControls })\nextend({ TransformControls })\n\n// TestCase #0\nconst Cube = () => {\n    var meshRef: any = useRef();\n    const [raycasted, setRaycasted]: any = useState({});\n\n    useEffect(() => {\n        // console.log(meshRef);\n        console.log(\"face index: %s\", raycasted ? raycasted.faceIndex : \"\");\n    }, [raycasted.faceIndex])\n\n    const onHover = useCallback(\n        (e, entering?) => {\n            const dummy = (entering === undefined) ? \"\" : (entering ? console.log(\"Pointer Enters\") : console.log(\"Pointer Leaves\"));\n            e.stopPropagation();\n            setRaycasted(e);\n        },\n        []\n    );\n\n    return (\n        <>\n            <mesh ref={meshRef} position={[0, 0, 0]}\n                onPointerMove={e => onHover(e)}\n                onPointerOver={e => onHover(e, true)}\n                onPointerOut={e => onHover(e, false)}\n            >\n                <boxBufferGeometry attach=\"geometry\" args={[10, 10, 10]} />\n                <meshBasicMaterial attach=\"material\" color=\"#000000\" wireframe />\n            </mesh>\n            <RaycastHLP input={raycasted} />\n        </>\n    );\n}\n// TestCase #1\nconst Sphere = () => {\n    const [raycasted, setRaycasted] = useState({ index: null });\n\n    const onHover = useCallback(\n        (e, value) => {\n            // e.stopPropagation();\n            setRaycasted(e);\n        }, []);\n\n    return (\n        <>\n            <RaycastHLP input={raycasted} />\n            <mesh position={[0, 0, 0]} onPointerMove={e => onHover(e, true)}>\n                <sphereBufferGeometry attach=\"geometry\" args={[15, 6, 6]} />\n                <meshBasicMaterial attach=\"material\" color=\"#000000\" wireframe />\n            </mesh>\n        </>\n    );\n}\n\n// TestCase #2\nconst Plane = () => {\n    const [raycasted, setRaycasted] = useState({ index: null });\n\n    const onHover = useCallback(\n        (e, value) => {\n            e.stopPropagation();\n            setRaycasted(e);\n        }, []);\n\n    return (\n        <>\n            <mesh position={[0, 0, 0]} onPointerMove={e => onHover(e, true)}>\n                <planeBufferGeometry attach=\"geometry\" args={[16, 16, 4, 4]} />\n                <meshBasicMaterial attach=\"material\" color=\"#000000\" wireframe />\n            </mesh>\n            <RaycastHLP input={raycasted} />\n        </>\n    );\n}\n\nconst TestCases = [Cube, Sphere, Plane];\n\nexport default (/*{ sample }: any*/) => {\n    const sample = useSampleStates(state => state.sample);   // get sample from states instead of from props to subscribe updates\n    const caseNb = (sample.caseNb !== undefined && sample.caseNb !== null && sample.caseNb !== \"\") ? sample.caseNb : 0;\n    const TestCase = TestCases[caseNb];\n\n    return (\n        <>\n            <InfoOverlay sample={sample} />\n            <CaseSelector sampleCases={TestCases} caseId={caseNb} />\n            <Canvas gl2 camera={{ position: [50, 25, 50] }}>\n                <Controls />\n                <TestCase />\n            </Canvas>\n        </>\n    )\n};"],"sourceRoot":""}