{"version":3,"sources":["components/UI/Overlay.tsx","resources/assets/img/sand.jpg","resources/assets/img/sand_norm.png","resources/catalogs/Materials.tsx","resources/catalogs/Textures.ts","resources/catalogs/Shaders.ts","samples/BasicDemo.tsx","components/Helpers/BoxEntityCtrlHlp.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","components/Utils/BoxUtils.ts","samples/BoxSplitDemo.tsx"],"names":["InfoOverlay","sample","console","log","name","caseNb","className","id","CaseSelector","sampleCases","caseId","setSample","useSampleStates","state","value","onChange","evt","target","Object","keys","map","key","module","exports","CATALOG","textureLoader","THREE","buildTex","texImg","repeat","load","wrapS","wrapT","anisotropy","set","sand_norm","img_sand_norm","Color","uniforms","vertexShader","join","fragmentShader","Material","props","WATER","attach","opacity","transparent","color","SAND","side","metalness","bumpScale","img_sand","normalMap","TextureCatalog","SHADCOL","Shaders","extend","OrbitControls","TransformControls","Wrapper","gl","useThree","setClearColor","shadowMap","enabled","type","Controls","orbitRef","useRef","transfCtrlRef","camera","setTransfCtrl","useFrame","current","update","useEffect","addEventListener","event","ref","args","domElement","enableDamping","dampingFactor","rotateSpeed","Lights","lt","time","clock","getElapsedTime","position","x","Math","sin","z","cos","intensity","angle","penumbra","castShadow","Helpers","size","Static","grp","plane","rotation-x","PI","receiveShadow","push","Moveable","transfCtrl","onClick","useCallback","e","stopPropagation","object","cube","gl2","BOX_SELECT_MODES","defaultStyle","default","alpha","ghostColor","ghostAlpha","hovered","selected","BoxEntityCtrlHlp","boxEnt","boxStyle","useState","isHovered","setIsHovered","boxRef","ghostRef","boxDim","Vector3","box","getSize","boxCenter","getCenter","style","assign","onHover","setFromObject","inputCtrl","InputCtrl","onPointerUp","onPointerOver","onPointerOut","onWheel","toArray","onMove","matrix","detach","removeEventListener","_defineProperties","i","length","descriptor","enumerable","configurable","writable","defineProperty","BoxSplitter","rejected","Constructor","protoProps","staticProps","combination","targetVol","volume","reduce","sizeSum","y","round","this","checkDuplicate","candidates","volumeTarget","level","valid","filter","findIndex","box2","containsBox","clone","expandByScalar","intersectsBox","validBoxes","validBox","find","makeCombinations","checkValidity","intersectBox","min","combinationArr","combin2","dupe","forEach","found","equals","intersectBoxes","overlapBox","boxPts","pts","max","flat","arr","p","index","p2","splice","boxes","slice","Box3","expandByPoint","vol","emptySpace","volDiff","combinationCandidates","combin","sort","g1","g2","res","prototype","StaticBoxStyle","MovingBoxStyle","OverlapBoxStyle","SplitBoxesStyle","orig","orig2","dim","dim2","staticBox","movingBox","add","AnimationWidget","setTime","Date","custom","toLocaleTimeString","Main","clk","anim","splitBoxes","setSplitBoxes","staticBoxEnt","movingBoxEnt","mat","applyMatrix4","setFromCenterAndSize","intersect","split","realTime","date","setHours","floor","setMinutes","Matrix4","statBoxCenter","movBoxCenter","t","getHours","getMinutes","makeTranslation","window","code","helpers","splitBoxHelpers","ent"],"mappings":"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","file":"static/js/5.2b02afe2.chunk.js","sourcesContent":["import React from \"react\"\nimport { useSampleStates } from \"../../common/SampleStates\";\nimport './UI.css'\n/**\n * An overlay to display basic information\n */\nexport const InfoOverlay = ({ sample }: { sample: any }) => {\n    console.log(\"Sample: %s %s\", sample.name, sample.caseNb ? \"#\" + sample.caseNb : \"\");\n\n    return (<>\n        <div className=\"overlay\" id=\"info\">\n            <span >\n                {sample.name}\n            </span>\n        </div>\n    </>)\n}\n\n/**\n * A dropdown menu to select a sample case (e.g. test case)\n * @param param0 case options + current caseId\n * export sample.caseNb in states\n */\nexport const CaseSelector = ({ sampleCases, caseId }: { sampleCases: any, caseId: number }) => {\n    const setSample = useSampleStates(state => state.setSample);\n\n    console.log(\"switch to case #\" + sampleCases[caseId].name)\n\n    return (<>\n        <div className=\"overlay\" id=\"caseSelector\">\n            <select id=\"testCases\" value={caseId} onChange={evt => setSample({ caseNb: evt.target.value })}>\n                {Object.keys(sampleCases).map((key) =>\n                    <option key={key} value={key}>{sampleCases[key].name}</option>\n                )}\n            </select>\n        </div>\n    </>)\n}","module.exports = __webpack_public_path__ + \"static/media/sand.be1ebb92.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sand_norm.3d153e6a.png\";","import React from \"react\";\nimport * as THREE from \"three\";\nimport * as TextureCatalog from \"./Textures\";\nimport * as Shaders from './Shaders';\nexport enum CATALOG {\n  WATER,\n  SAND,\n  SHADCOL\n}\nexport type MaterialProps = {\n  name: CATALOG,\n  repeat: number\n}\nexport function Material(props: MaterialProps) {\n  switch (props.name) {\n    case CATALOG.WATER:\n      return (\n        <meshStandardMaterial\n          attach=\"material\"\n          opacity={0.5}\n          transparent={true}\n          color={0xff0000}\n        />);\n    case CATALOG.SAND:\n      return (\n        <meshStandardMaterial\n          attach=\"material\"\n          opacity={0.5}\n          transparent={false}\n          color={0xffffff}\n          side={THREE.DoubleSide}\n          metalness={0.2}\n          bumpScale={0.0005}\n          map={TextureCatalog.sand(props.repeat)}\n          normalMap={TextureCatalog.sand_norm(props.repeat)}\n        />);\n    case CATALOG.SHADCOL:\n      return (<shaderMaterial\n        attach=\"material\"\n        vertexShader={Shaders.Color.vertexShader}\n        fragmentShader={Shaders.Color.fragmentShader}\n      />)\n  }\n}\n","import * as THREE from 'three';\nimport img_sand from '../assets/img/sand.jpg';\nimport img_sand_norm from '../assets/img/sand_norm.png';\n\nvar textureLoader = new THREE.TextureLoader();\n\nvar buildTex = (texImg: string, repeat: number) => {\n    return textureLoader.load(texImg, (map: THREE.Texture) => {\n        map.wrapS = THREE.RepeatWrapping;\n        map.wrapT = THREE.RepeatWrapping;\n        map.anisotropy = 4;\n        map.repeat.set(repeat, repeat);\n        return map;\n    });\n}\n\nvar sand = (repeat: number) => { return buildTex(img_sand, repeat) };\nvar sand_norm = (repeat: number) => { return buildTex(img_sand_norm, repeat) };\n\nexport {sand, sand_norm};","// import { Vector4, Uniform } from \"three/build/three.module\";\n// import * as TextureCatalog from \"./TextureCatalog\";\n\nvar Color = {\n\n    uniforms: {\n    },\n\n    vertexShader: [\n        \"attribute vec3 color;\",\n        \"varying vec3 col;\",\n        \"void main()\",\n        \"{\",\n        \"   col = color;\",\n        \"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n        \"\tgl_Position = projectionMatrix * mvPosition;\",\n        \"}\"\n    ].join(\"\\n\"),\n\n    fragmentShader: [\n        \"in vec3 col;\",\n        \"void main( void ) {\",\n        \"\tgl_FragColor = vec4(col.r,col.g,col.b,1.0);\",\n        \"}\"\n    ].join(\"\\n\")\n\n};\n\nexport { Color};\n","///<reference path=\"../dts/misc-types-extend.d.ts\" />\nimport React, { useRef, useEffect, useCallback } from \"react\";\nimport * as THREE from \"three\";\nimport { useFrame, extend, useThree, Canvas } from \"react-three-fiber\";\nimport { Material, CATALOG } from \"../resources/catalogs/Materials\";\nimport { useSampleStates } from \"../common/SampleStates\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { TransformControls } from \"three/examples/jsm/controls/TransformControls\";\nimport { InfoOverlay } from \"../components/UI/Overlay\";\n\ndeclare global {\n    // eslint-disable-next-line @typescript-eslint/no-namespace\n    namespace JSX {\n        interface IntrinsicElements {\n            orbitControls: any;\n            transformControls: any;\n        }\n    }\n}\n\nextend({ OrbitControls })\nextend({ TransformControls })\n\nexport const Wrapper = (props: any) => {\n    const {\n        gl,                           // WebGL renderer\n        // scene,                        // Default scene\n        // camera,                       // Default camera\n        // size,                         // Bounds of the view (which stretches 100% and auto-adjusts)\n        // viewport,                     // Bounds of the viewport in 3d units + factor (size/viewport)\n        // aspect,                       // Aspect ratio (size.width / size.height)\n        // mouse,                        // Current 2D mouse coordinates\n        // clock,                        // THREE.Clock (useful for useFrame deltas)\n        // invalidate,                   // Invalidates a single frame (for <Canvas invalidateFrameloop />)\n        // intersect,                    // Calls onMouseMove handlers for objects underneath the cursor\n        // setDefaultCamera,             // Sets the default camera\n    } = useThree();\n\n    gl.setClearColor(0x000000);\n    gl.shadowMap.enabled = true;\n    gl.shadowMap.type = THREE.PCFSoftShadowMap;\n\n    return (<>\n\n    </>)\n}\n\nexport const Controls = () => {\n    const orbitRef: any = useRef()\n    const transfCtrlRef: any = useRef()\n\n    const { camera, gl } = useThree()\n    const setTransfCtrl = useSampleStates(state => state.setTransfCtrl)\n\n    useFrame(() => {\n        orbitRef.current.update();\n    })\n\n    useEffect(() => {\n        setTransfCtrl(transfCtrlRef.current);\n        transfCtrlRef.current.addEventListener('dragging-changed', (event: any) =>\n            orbitRef.current.enabled = !event.value);\n    }, []);\n\n    return (\n        <>\n            <orbitControls ref={orbitRef} args={[camera, gl.domElement]} enableDamping dampingFactor={0.1} rotateSpeed={0.5} />\n            <transformControls ref={transfCtrlRef} args={[camera, gl.domElement]} />\n        </>\n    )\n};\n\nexport const Lights = (props: any) => {\n    const lt: any = useRef();\n\n    useFrame((state) => {\n        const time = state.clock.getElapsedTime();\n        // mesh.current.rotation.y += 0.01;\n        lt.current.position.x = 50 * Math.sin(time / 2);\n        lt.current.position.z = 50 * Math.cos(time / 2);\n    });\n\n    return (<>\n        <spotLight ref={lt} intensity={1} position={[30, 30, 50]} angle={0.2} penumbra={1} castShadow />\n    </>)\n}\n\nexport const Helpers = (props: any) => {\n    return (<>\n        <gridHelper args={[props.size, 10]} />\n        <axesHelper args={[props.size / 2]} />\n    </>)\n}\n\nconst Static = () => {\n    var grp = [];\n\n    var plane = <mesh rotation-x={Math.PI / 2} receiveShadow>\n        <planeGeometry attach=\"geometry\" args={[50, 50]} />\n        <Material name={CATALOG.SAND} repeat={1} />\n    </mesh>\n\n    grp.push(plane);\n\n    return (<>\n        <group>{grp}</group>;\n    </>)\n}\n\nconst Moveable = () => {\n    const transfCtrl = useSampleStates(state => state.transfCtrl);\n\n    const onClick = useCallback(\n        e => {\n            e.stopPropagation();\n            transfCtrl.attach(e.object);\n        },\n        [transfCtrl]\n    );\n\n    var grp = [];\n\n    var cube = <mesh\n        // ref={mesh}\n        position={[0, 0, 0]}\n        castShadow\n        onClick={e => onClick(e)}\n    //   onPointerOver={e => onHover(e, true)}\n    //   onPointerOut={e => onHover(e, false)}\n    >\n        <boxBufferGeometry attach=\"geometry\" args={[10, 10, 10]} />\n        <Material name={CATALOG.SAND} repeat={1} />\n    </mesh>\n\n    grp.push(cube);\n\n    return (<>\n        <group>{grp}</group>;\n    </>)\n}\n\nexport default ({ sample }: any) => {\n\n    return (\n        <>\n            <InfoOverlay sample={sample} />\n            <Canvas gl2 camera={{ position: [15, 30, 50] }}\n            // onCreated={({ gl }) => ((gl.shadowMap.enabled = true), (gl.shadowMap.type = THREE.PCFSoftShadowMap))}>\n            >\n                <Wrapper />\n                <Lights />\n                <Helpers size={128} />\n                <Controls />\n                <Static />\n                <Moveable />\n            </Canvas>\n        </>\n    )\n};","import React, {\n  useRef,\n  useState,\n  useEffect,\n} from \"react\";\nimport { Box3, Vector3, Color } from \"three\";\nimport { useSampleStates } from \"../../common/SampleStates\";\n\nexport type BoxStyle = {\n  color: string,\n  alpha: number,\n  ghostColor: string,\n  ghostAlpha: number\n}\n\nexport type BoxEntity = {\n  box: Box3,\n  selected: Boolean\n}\n\nexport enum BOX_SELECT_MODES {\n  SINGLE,\n  MULTI,\n  DRAG,\n  DRAGMULTI,\n  ALLORNOT\n}\n\nconst defaultStyle = {\n  default: {\n    color: 'white',\n    alpha: 0.2,\n    ghostColor: 'white',\n    ghostAlpha: 0\n  },\n  hovered: {            // only affects unselected box\n    color: 'white',   // box color seems to have no impact here\n    alpha: 0.5,\n    ghostColor: 'brown',\n    ghostAlpha: 0.2\n  },\n  selected: {\n    color: 'orange',\n    alpha: 0.8,\n    ghostColor: 'green',\n    ghostAlpha: 0.4\n  }\n}\n\nexport const BoxEntityCtrlHlp = ({ boxEnt, onClick = () => { }, onChange = () => { }, boxStyle = defaultStyle }:\n  { boxEnt: BoxEntity, onClick?: any, onChange?: any, boxStyle?: any }) => {\n  const [isHovered, setIsHovered] = useState(true);\n  const boxRef: any = useRef();\n  const ghostRef: any = useRef();\n\n  const boxDim: any = new Vector3()\n  boxEnt.box.getSize(boxDim);\n  const boxCenter: any = new Vector3()\n  boxEnt.box.getCenter(boxCenter);\n\n  var style = { ...defaultStyle };\n  Object.assign(style, boxStyle); // fill missing custom style properties if provided\n\n  // color\n  const color = boxEnt.selected ? style.selected.color : style.default.color;\n  const alpha = boxEnt.selected ? style.selected.alpha : isHovered ? style.hovered.alpha : style.default.alpha;\n  const ghostColor = boxEnt.selected ? style.selected.ghostColor : style.default.ghostColor;\n  const ghostAlpha = boxEnt.selected ? style.selected.ghostAlpha : isHovered ? style.hovered.ghostAlpha : style.default.ghostAlpha;\n\n  // Events\n  const onHover = //useCallback(\n    (e: any, enabled: any) => {\n      e.stopPropagation();\n      setIsHovered(enabled);\n    }//,[isHovered]);\n\n  useEffect(() => {\n    boxRef.current.setFromObject(ghostRef.current);\n  })\n  const inputCtrl = boxEnt.selected && ghostRef.current ? <InputCtrl /*ref={ghostRef}*/ onChange={onChange} object={ghostRef.current} /> : \"\";\n\n\n  return (\n    <>\n      {inputCtrl}\n      <boxHelper ref={boxRef} >\n        <lineBasicMaterial attach='material' color={new Color(color)} transparent opacity={alpha} />\n      </boxHelper>\n      <mesh ref={ghostRef} attach=\"object\"\n        // visible={ghostAlpha > 0}\n        position={boxCenter}\n        onPointerUp={e => onClick(e)}\n        onPointerOver={e => onHover(e, true)}\n        onPointerOut={e => onHover(e, false)}\n        onWheel={() => console.log(\"wheel\")}\n      >\n        <boxBufferGeometry attach=\"geometry\" args={boxDim.toArray()} />\n        <meshStandardMaterial\n          attach=\"material\"\n          color={ghostColor}\n          transparent\n          opacity={ghostAlpha}\n        />\n      </mesh>\n    </>\n  );\n};\n\nconst InputCtrl =\n  // React.forwardRef(({ onChange, object }, objectRef) => {\n  ({ onChange, object }: any) => {\n    const transfCtrl = useSampleStates(state => state.transfCtrl);\n\n    const onMove = (event: any) => {\n      onChange(event.target.object.matrix)\n    }\n\n    useEffect(() => {\n      if (transfCtrl.enabled) {\n        console.log(\"attach controled object\");\n        transfCtrl.attach(object);\n        transfCtrl.addEventListener('dragging-changed', onMove);\n      }\n    }, [transfCtrl]);\n\n    // cleanup effect hook\n    useEffect(() => () => {\n      console.log(\"detach controled object\");\n      transfCtrl.detach();\n      transfCtrl.removeEventListener('dragging-changed', onMove);\n    }, []);\n\n    return <></>\n  }//)\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import { Box3, Vector3 } from 'three';\n\nexport class BoxSplitter {\n\n    rejected = [];\n    static rejected: any;\n\n    static checkValidity(combination: any[], targetVol: number) {\n        var volume = combination.reduce((sizeSum: number, box: Box3) => {\n            var size = new Vector3();\n            box.getSize(size);\n            return sizeSum + size.x * size.y * size.z;\n        }, 0);\n        if (Math.round(volume) === Math.round(targetVol)) {\n            return combination;\n        }\n        else {\n            // console.log(\"Discard volume\");\n            // store.dispatch({ type: \"DEBUG\", subtype: \"STORE_VAL\", key: \"boxCombination\", val: grp });\n            if (!this.rejected) this.rejected = [];\n            if (BoxSplitter.checkDuplicate(combination, this.rejected)) {\n                this.rejected.push(combination);\n            }\n            return null;\n        }\n    }\n\n    static makeCombinations(combination: any[],\n        candidates: any[],\n        volumeTarget: any,\n        level: number): Box3[] | null {\n        var valid = candidates.filter((box: any) => {\n            // remove overlapping boxes\n            var index = combination.findIndex((box2: Box3) => {\n                return box2.containsBox(box) || box2.clone().expandByScalar(-0.01).intersectsBox(box);\n            });\n            return index === -1;\n        });\n        if (valid && valid.length) {\n            var validBoxes: Box3[] | null = [];\n            var validBox = valid.find((box: any, i: any) => {\n                // if(level <= 2) console.log(\"level \"+level+\" testing box \"+i+\"/\"+valid.length);\n                validBoxes = BoxSplitter.makeCombinations([...combination, box], valid, volumeTarget, level + 1);\n                return validBoxes !== null;\n            });\n            return validBox ? [validBox, ...validBoxes] : null;\n        } else if (this.checkValidity(combination, volumeTarget)) {\n            return [];  // working case\n        } else {\n            return null;    // non working case\n        }\n    }\n\n    static checkIntersections(intersectBox: Box3) {\n        var size = new Vector3(0);\n        intersectBox.getSize(size);\n        // intersects only if all size are not null\n        return Math.min(...size.toArray());\n    }\n\n    static checkDuplicate(combination: any[], combinationArr: any[]) {\n        var duplicate = combinationArr.find((combin2: any[]) => {\n            var dupe = true;\n            combination.forEach((box: any) => {\n                var found = combin2.find((box2: { equals: (arg0: any) => any; }) => { return box2.equals(box) });\n                dupe = dupe && found;\n            });\n            return dupe;\n        })\n        return !duplicate;\n    }\n\n    // getBoxSplitLayout\n    static split(box: Box3, intersectBoxes: Box3[]) {\n        // check inputs\n        var notOverlapping = intersectBoxes.filter(overlapBox => !box.intersectsBox(overlapBox));\n        if (notOverlapping.length) {\n            console.log(\"NOT all boxes are overlapping => don't go further\");\n            return [];\n        } else {\n            var boxPtsArr = [box, ...intersectBoxes].map((box) => {\n                var pts = [];\n                pts.push(box.min.clone());\n                pts.push(new Vector3(box.max.x, box.min.y, box.min.z));\n                pts.push(new Vector3(box.max.x, box.min.y, box.max.z));\n                pts.push(new Vector3(box.min.x, box.min.y, box.max.z));\n                pts.push(new Vector3(box.min.x, box.max.y, box.min.z));\n                pts.push(new Vector3(box.max.x, box.max.y, box.min.z));\n                pts.push(box.max.clone());\n                pts.push(new Vector3(box.min.x, box.max.y, box.max.z));\n                return pts;\n            });\n\n            var boxPts: Vector3[] = boxPtsArr.flat().reduce((arr: Vector3[], p: Vector3) => {\n                var index = arr.findIndex((p2: any) => { return p.equals(p2) });\n                if (index === -1) return [...arr, p];\n                else {\n                    arr.splice(index, 1);\n                    return arr;\n                }\n            }, []);\n            var boxes: Box3[] = [];\n            boxPts.forEach((p, i) => {\n                var candidates = boxPts.slice(i).filter((p2) => {\n                    return (p.x !== p2.x && p.y !== p2.y && p.z !== p2.z);\n                });\n                candidates.forEach((p2) => {\n                    var box = new Box3();\n                    box.expandByPoint(p);\n                    box.expandByPoint(p2);\n                    var invalid = intersectBoxes.find((box2: Box3) => {\n                        return box.intersectsBox(box2.clone().expandByScalar(-0.1));\n                    });\n                    if (!invalid) boxes.push(box);\n                });\n            });\n\n            var size = new Vector3();\n            box.getSize(size);\n            var vol = size.x * size.y * size.z;\n            var emptySpace = intersectBoxes.reduce((volDiff: number, box: Box3) => {\n                box.getSize(size);\n                return volDiff - size.x * size.y * size.z;\n            }, vol);\n\n            var combinationCandidates: any[] = [];\n            boxes.forEach((box) => {\n                var combin = BoxSplitter.makeCombinations([box], boxes, emptySpace, 0);\n                if (combin) {\n                    combin = [box, ...combin];\n                    if (BoxSplitter.checkDuplicate(combin, combinationCandidates)) {\n                        combinationCandidates.push(combin);\n                    }\n                }\n            })\n            combinationCandidates.sort((g1, g2) => {\n                return (g1.length - g2.length)\n            })\n\n            var res = combinationCandidates[0];\n            if (!res) {\n                console.log(\"WARN No split found for intersection of \");\n                console.log(box)\n                console.log(\"with boxes: \");\n                console.log(intersectBoxes)\n                console.log(\"DEBUG => rejected combination:\");\n                console.log(this.rejected);\n                // return this.rejected;\n                return null;\n            }\n            return res;\n        }\n    }\n\n    static getRejected() {\n        return this.rejected;\n    }\n}","///<reference path=\"../dts/misc-types-extend.d.ts\" />\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Box3, Vector3, Matrix4 } from \"three\";\nimport { BoxSplitter } from \"../components/Utils/BoxUtils\";\nimport { useFrame, useThree, Canvas } from \"react-three-fiber\";\nimport { BoxEntityCtrlHlp } from \"../components/Helpers/BoxEntityCtrlHlp\";\nimport { useSampleStates } from \"../common/SampleStates\";\nimport { InfoOverlay } from \"../components/UI/Overlay\";\nimport { Controls, Wrapper } from \"./BasicDemo\";\n\n\nconst StaticBoxStyle = {\n    default: {\n        color: \"white\",\n        alpha: 0.4,\n        ghostColor: \"white\",\n        ghostAlpha: 0\n    },\n    hovered: {\n        color: \"orange\",\n        alpha: 0.4,\n        ghostColor: \"white\",\n        ghostAlpha: 0\n    }\n}\n\nconst MovingBoxStyle = {\n    selected: {\n        color: \"white\",\n        alpha: 0.6,\n        ghostColor: \"white\",\n        ghostAlpha: 0.1\n    }\n}\n\nconst OverlapBoxStyle = {\n    default: {\n        color: \"red\",\n        alpha: 1,\n        ghostColor: \"red\",\n        ghostAlpha: 0.1\n    }\n}\n\nconst SplitBoxesStyle = {\n    default: {\n        color: \"green\",\n        alpha: 1,\n        ghostColor: \"green\",\n        ghostAlpha: 0.1\n    }\n}\n\nconst orig = new Vector3(0, 0, 0);\nvar orig2 = new Vector3(20, 30, 40);\nconst dim = new Vector3(50, 50, 50);\nconst dim2 = new Vector3(51, 51, 25);\nconst staticBox = new Box3(orig, dim);\nconst movingBox = new Box3(orig2, orig2.clone().add(dim2));\n\nconst AnimationWidget = () => {\n    const time = useSampleStates(state => state.time);\n    const setTime = useSampleStates(state => state.setTime);\n\n    // init time state\n    useEffect(() => {\n        setTime(new Date(0))\n    }, [])\n\n    return (<>\n        {time.custom ? <span className=\"overlay\" id=\"timeinfo\">Custom Time (SPACE key to toggle anim) {time.custom.toLocaleTimeString()}  </span> : \"\"}\n    </>)\n}\n\nconst Main = () => {\n\n    const time = useSampleStates(state => state.time);\n    const setTime = useSampleStates(state => state.setTime);\n    // convert to minutes:\n    const clk = useThree().clock;\n    const anim = useRef(false);\n\n    const [splitBoxes, setSplitBoxes]: any = useState([]);\n\n    const staticBoxEnt = {\n        box: staticBox,\n        selected: false\n    }\n\n    const movingBoxEnt = {\n        box: movingBox,\n        selected: true,\n    }\n\n    const onMove = (mat: Matrix4) => {\n        var movingBox = movingBoxEnt.box;\n        const boxDim: any = new Vector3(0, 0, 0);\n        movingBox.getSize(boxDim);\n        const boxCenter: any = new Vector3()\n        boxCenter.applyMatrix4(mat);\n        movingBoxEnt.box.setFromCenterAndSize(boxCenter, boxDim);\n        if (movingBox.intersectsBox(staticBox)) {\n            var overlapBox = movingBox.clone().intersect(staticBox);\n            var splitBoxes = BoxSplitter.split(staticBox, [overlapBox]);\n            setSplitBoxes([overlapBox, ...splitBoxes]);\n        }\n        return {};\n    }\n\n    useFrame(() => {\n        var realTime = clk.getElapsedTime(); //Math.round(clk.getElapsedTime() * 100);\n        var date = new Date(0);\n        date.setHours(Math.floor(realTime) % 24);\n        date.setMinutes(Math.floor((realTime - Math.floor(realTime)) * 60))\n        if (anim.current) {\n            setTime(date);\n        }\n    })\n\n    useEffect(() => {\n        var mat = new Matrix4()\n        const statBoxCenter = new Vector3(0, 0, 0);\n        staticBox.getCenter(statBoxCenter);\n        const movBoxCenter = new Vector3(0, 0, 0);\n        movingBox.getCenter(movBoxCenter);\n        var t = time.custom.getHours() * 60 + time.custom.getMinutes();\n        var tmax = 24 * 60;\n        mat.makeTranslation(statBoxCenter.x / 2 * (1 + Math.cos(2 * Math.PI * t / tmax) * 2),\n            25 * (1 + Math.sin(2 * Math.PI * t / tmax) * 2),\n            movBoxCenter.z);\n        onMove(mat);\n    }, [time]);\n\n    useEffect(() => {\n        // Start/Stop animation\n        window.addEventListener('keydown', (evt) => {\n            if (evt.code === \"Space\")\n                anim.current = !anim.current;\n        }, false);\n    }, [])\n\n    const helpers = [<BoxEntityCtrlHlp key={0} boxEnt={staticBoxEnt} boxStyle={StaticBoxStyle} />,\n    <BoxEntityCtrlHlp key={1} boxEnt={movingBoxEnt} onChange={onMove} boxStyle={MovingBoxStyle} />];\n\n    const splitBoxHelpers = splitBoxes.map((box: Box3, i: number) => {\n        var ent = {\n            box: box,\n            selected: false\n        };\n        var style = i ? SplitBoxesStyle : OverlapBoxStyle\n        return <BoxEntityCtrlHlp key={i + 2} boxEnt={ent} boxStyle={{ ...style }} />\n    })\n\n    return (<>\n        {helpers}\n        {splitBoxHelpers}\n    </>)\n}\n\n\nexport default ({ sample }: any) => {\n    return (<>\n        <AnimationWidget />\n        <InfoOverlay sample={sample} />\n        <Canvas camera={{ position: [100, 50, 100] }}>\n            <ambientLight intensity={0.5} />\n            <Wrapper />\n            <Controls />\n            <Main />\n        </Canvas>\n    </>)\n};"],"sourceRoot":""}