{"version":3,"sources":["modules/UI/Overlay.tsx","resources/catalogs/misc/heightFunctions.ts","common/misc.ts","modules/Geo/GeoTools.ts","modules/Geo/UI/input.tsx","modules/Heightmap/UI/canvas.tsx","samples/Tools/HeightmapGen.tsx"],"names":["InfoOverlay","sampleName","sampleDesc","className","id","CaseSelector","items","current","onSelect","value","onChange","evt","target","Object","keys","map","key","simplex","SimplexNoise","sinusoid","p","Math","cos","length","noise","p2","clone","freq","i","noise4d","x","y","pow","requestAPI","url","a","console","log","opt","mode","fetch","response","json","SRS","DEFAULT_GEODATA_INPUT","projectGeoData","geoData","points","item","inputStr","lon","lat","z","API_BaseUrl","coords","push","Vector3","parseInt","limits","getBoundaries","min","max","range","sub","round","origin","add","multiplyScalar","localPts","pt","v","reduce","val","ptsListHeighFn","pointSet","center","translat","findIndex","distanceTo","Vector2","findPt","TextBox","handleSubmit","defaultValue","useState","text","setText","onSubmit","event","type","CanvasOverlay","width","height","pointsBuff","canvasRef","useRef","useEffect","ctx","getContext","imageData","createImageData","fillCanvasData","putImageData","canvasToImg","ref","forEach","c","index","floor","data","setPixel","alpha","canvas","image","Image","src","toDataURL","W","HEIGHTFUNCS","HeightFunctions","geoFunc","ALL_CASES","sample","currCase","setCurrCase","selectCase","currFunc","processCustData","inputData","pts","arr","Array","heightArr","elt","caseId","txt","preventDefault","JSON","parse","stringify"],"mappings":"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","file":"static/js/10.56c823a0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./UI.css\";\n\n/**\n * An overlay to display basic information\n */\nexport const InfoOverlay = ({ sampleName, sampleDesc }: any) => {\n\n  return (\n    <>\n      <div className=\"overlay top centered\">\n        <div id=\"infoLabel\">{sampleName}</div>\n        <div id=\"description\">{sampleDesc}</div>\n      </div>\n    </>\n  );\n}\n\n/**\n * A dropdown menu to select a sample case (e.g. test case)\n * @param param0 case options + current caseId\n * export sample.caseNb in states\n */\nexport const CaseSelector = ({\n  items,\n  current,\n  onSelect\n}: {\n  items: any;\n  current: number;\n  onSelect: any;\n}) => {\n  // const setSample = useSampleStates(state => state.setSample);\n\n  return (\n    <>\n      <div className=\"overlay top inputBtn\" id=\"caseSelector\">\n        <select\n          id=\"testCases\"\n          value={current}\n          onChange={evt => onSelect(evt.target.value)}\n        >\n          {Object.keys(items).map(key => (\n            <option key={key} value={key}>\n              {items[key]}\n            </option>\n          ))}\n        </select>\n      </div>\n    </>\n  );\n};\n\n\n\n","import { SimplexNoise } from \"three/examples/jsm/math/SimplexNoise\";\nimport { Vector2 } from \"three\";\n\nconst simplex = new SimplexNoise();\n\nexport const sinusoid = (p: Vector2) => Math.cos(p.length() / 8); //Math.abs(Math.cos(v2.length() / 32) / 4 + 1.4) / 2;\n\nexport const noise = (p: Vector2) => {\n  var p2 = p.clone(); //.multiplyScalar(0.25);\n  var freq = [0.0125, 0.025, 0.05, 0.1, 0.2, 0.4, 0.8];\n  var noise = 0;\n  for (var i = 0; i < freq.length; i++) {\n    noise +=\n      (simplex.noise4d(p2.x * freq[i], p2.y * freq[i], 0, 0) + 0.5) /\n      Math.pow(2, i + 1); //\n  }\n  return noise;\n};\n","/**\n * Request an url and return response\n * @param url \n */\nexport const requestAPI = async (url: string) => {\n    console.log(\"fetching \" + url);\n    const opt: RequestInit = { mode: \"cors\" };\n    // fetch URL\n    // (async () => {\n    try {\n      let response = await fetch(url, opt);\n      let json = await response.json();\n      // console.log(json);\n      return json;\n    } catch (e) {\n      console.log(e)\n    }\n    // })();\n  }","/** Toolbox to handle geometric data*/\n\nimport { Vector3, Vector2 } from \"three\";\nimport { requestAPI } from \"../../common/misc\";\n\nconst API_BaseUrl = \"https://epsg.io/\";\nconst API_Transform = \"trans\";\nconst API_Map = \"map\";\n\n// for conversion unit from/to (what SRS stands for?)\nconst SRS = {\n  source: 4326, // geodesic\n  target: 3857  // \n}\n\n// default geo data\nexport const DEFAULT_GEODATA_INPUT = [{\n  \"lon\": \"4.123\",\n  \"lat\": \"45.432\",\n  \"z\": \"100.0\",\n},\n{\n  \"lon\": \"4.1235\",\n  \"lat\": \"45.4325\",\n  \"z\": \"125.0\",\n},\n{\n  \"lon\": \"4.124\",\n  \"lat\": \"45.4321\",\n  \"z\": \"125.0\",\n}]\n\n/**\n * linear projection of geodata\n * @param geoData array of geo data with terrain elevation\n */\nexport const projectGeoData = async (geoData: any) => {\n  const size = 256;\n\n  // Convert geodesic (lat,lon) to mercator(planar x,y,z)\n  var points = [];\n  for (var item of geoData) {\n    // construct URL for API call\n    // const inputStr = \"x=\" + item.lon + \"&y=\" + item.lat + \"&z=\" + item.z;\n    const inputStr = `?x=${item.lon}&y=${item.lat}&z=${item.z}&s_srs=${SRS.source}&t_srs=${SRS.target}`;\n    const url = API_BaseUrl + API_Transform + inputStr;\n\n    const coords = await requestAPI(url);\n    points.push(new Vector3(parseInt(coords.x), parseInt(coords.y), parseInt(coords.z)));\n  }\n\n  const limits = getBoundaries(points);\n\n  const mapDispStr = `${SRS.target}`\n  console.log(\"Min found at: \" + API_BaseUrl + API_Map + \"#srs=3857&x=%s&y=%s&z=18&layer=satellite\", limits.min.x, limits.min.y);\n  console.log('Max found at: https://epsg.io/map#srs=3857&x=%s&y=%s&z=18&layer=satellite', limits.max.x, limits.max.y);\n\n  // Compute area dimensions + altitude range\n  const range = limits.max.clone().sub(limits.min).round();\n  console.log(\"Altitude range %sm -> %sm  (+%sm)\", limits.min.z, limits.max.z, range.z);\n  console.log(\"Area dimensions H:%sm x W:%sm\", range.x, range.y);\n\n  // set origin at middle\n  const origin = limits.min.clone().add(range.clone().multiplyScalar(0.5));\n  console.log(\"origin set to:\")\n  console.log(origin);\n  // center on origin => all coords become relative to this reference point\n  const localPts = points.map(pt => pt.clone().sub(origin));\n  return localPts;\n};\n/**\n * get min/max of a point list\n * @param points \n */\nconst getBoundaries = (points: Vector3[]) => {\n  // Find min/max\n  const min = new Vector3(); const max = new Vector3();\n  min.x = points.map(v => v.x).reduce((min, val) => val < min ? val : min);\n  min.y = points.map(v => v.y).reduce((min, val) => val < min ? val : min);\n  min.z = points.map(v => v.z).reduce((min, val) => val < min ? val : min);\n  max.x = points.map(v => v.x).reduce((max, val) => val > max ? val : max);\n  max.y = points.map(v => v.y).reduce((max, val) => val > max ? val : max);\n  max.z = points.map(v => v.z).reduce((max, val) => val > max ? val : max);\n  return { min, max }\n}\n\n/**\n* generate an height function to display a set of points\n */\nconst POINT_SIZE = 2; // point size to display on canvas\n\nexport const ptsListHeighFn = (pointSet: Vector3[]) => {\n  // rescale point set to fit target dim\n  const limits = getBoundaries(pointSet);\n  const range = limits.max.clone().sub(limits.min).round();\n  const center = limits.min.clone().add(range.clone().multiplyScalar(0.5));\n  // reposition on center\n  let localPts = pointSet.map(pt => pt.clone().sub(center));\n  // translate on new center\n  const centerTarget = new Vector3(128, 128, 0.5);\n  const translat = centerTarget.clone().sub(center);\n  localPts = localPts.map(pt => pt.clone().add(translat));\n\n  const findPt = (p: any) =>\n    localPts.findIndex(pt => p.distanceTo(new Vector2(pt.y, pt.x)) < POINT_SIZE);\n\n  return (p: Vector2) => findPt(p) === -1;//? (pts[index].z - z.min) / z.range : 1;\n}","import React, { useState } from \"react\";\nimport './styles.css'\n/**\n * Multi purpose text box\n * @param handleSubmit \n */\nexport const TextBox = ({ handleSubmit, defaultValue = \"empty\" }: any) => {\n    const [text, setText] = useState(defaultValue);\n  \n    const handleChange = (event: any) => {\n      setText(event.target.value);\n    }\n  \n    // useEffect(() => {\n    //   setText(\"toto à vélo\");\n    // })\n  \n    return (\n      <>\n        <br />\n        <br />\n        <form className=\"overlay inputTextForm\" onSubmit={evt => handleSubmit(evt, text)}>\n          <label>\n            Format data as below <br />\n            <textarea id=\"textArea\" value={text} onChange={handleChange} />\n          </label><br />\n          <div className=\"submitBtn\">\n            <input type=\"submit\" value=\"process\" />\n          </div>\n        </form>\n      </>\n    );\n  }","import React, { useRef, useState, useEffect } from \"react\";\nimport './styles.css'\nimport { Vector3 } from \"three\";\n\n/**\n * A canvas overlay to display heighmaps\n */\nexport const CanvasOverlay = ({ width, height, pointsBuff }: any) => {\n    const canvasRef: any = useRef();\n    const [img, setImg]: any = useState();\n  \n    useEffect(() => {\n      const ctx: CanvasRenderingContext2D = canvasRef.current.getContext(\"2d\");\n  \n      // create a new pixel array\n      var imageData: ImageData = ctx.createImageData(\n        canvasRef.current.width,\n        canvasRef.current.height\n      );\n      fillCanvasData(pointsBuff, imageData);\n      // copy the image data back onto the canvas\n      ctx.putImageData(imageData, 0, 0); // at coords 0,0\n      // drawOnCanvas(pointsBuff, ctx);\n  \n      const img: HTMLImageElement = canvasToImg(canvasRef.current);\n      // setImg(img);\n    }, [pointsBuff]);\n    // console.log(img);\n    return (\n      <>\n        <div className=\"overlay right bottom\">\n          <canvas ref={canvasRef} width={width} height={height} id=\"canvasOvr\" />\n        </div>\n        {/* <img src={img ? img.src : null} alt=\"heightmap\" /> */}\n      </>\n    );\n  };\n\n  /**\n * \n * fill canvas imagedata input from point buffer\n * @param pointsBuff point buffer\n * @param imageData filled from input buffer\n */\nconst fillCanvasData = (pointsBuff: any, imageData: ImageData) => {\n    const setPixel = (imageData: any, i: number, c: number, a: number) => {\n      var x = i % imageData.width;\n      var y = Math.floor(i / imageData.width);\n      var index = (x + y * imageData.width) * 4;\n      imageData.data[index + 0] = c; //r\n      imageData.data[index + 1] = c; //g\n      imageData.data[index + 2] = c; //b\n      imageData.data[index + 3] = a;\n    };\n  \n    pointsBuff.forEach((val: number, i: number) => {\n      let alpha = 1; //((x % 5) % 4) * ((y % 5) % 4) * 255;\n      setPixel(imageData, i, val * 256, alpha * 255); // 255 opaque\n    });\n  };\n  \n  /**\n   * dump canvas to image\n   * @param canvas \n   */\n  \n  const canvasToImg = (canvas: HTMLCanvasElement) => {\n    var image = new Image();\n    image.src = canvas.toDataURL(\"image/png\");\n    return image;\n  };\n  \n  /**\n   * Draw some point list on canvas\n   */\n  \n  const drawOnCanvas = (ptsList: Vector3[], canvasCtx: CanvasRenderingContext2D) => {\n    canvasCtx.fillStyle = \"#FF0000\"; // ctx.fillStyle = \"rgb(200,0,0)\";\n    canvasCtx.fillRect(32, 32, 128, 128);\n    canvasCtx.beginPath();\n    canvasCtx.arc(95, 50, 40, 0, 2 * Math.PI);\n    canvasCtx.stroke();\n  }","///<reference path=\"../../dts/misc-types-extend.d.ts\" />\nimport React, { useState, useEffect, useRef, ChangeEvent } from \"react\";\nimport {\n  InfoOverlay,\n  CaseSelector,\n} from \"../../modules/UI/Overlay\";\nimport { Vector2 } from \"three\";\nimport * as HeightFunctions from \"../../resources/catalogs/misc/heightFunctions\";\nimport { projectGeoData, ptsListHeighFn, DEFAULT_GEODATA_INPUT } from \"../../modules/Geo/GeoTools\";\nimport { TextBox } from \"../../modules/Geo/UI/input\";\nimport { CanvasOverlay } from \"../../modules/Heightmap/UI/canvas\";\n// import geoData from \"../../resources/assets/oth/geodata.json\";\n\nconst W = 256;\nconst H = 256;\nlet geoFunc = (v: Vector2) => 0;  // dummy func until set later\nconst HEIGHTFUNCS: any = { ...HeightFunctions, geoFunc };\nconst ALL_CASES = [...Object.keys(HEIGHTFUNCS)];\n\n\nexport default ({ sample }: any) => {\n  const [currCase, setCurrCase] = useState(0);\n\n  const selectCase = ALL_CASES[currCase]\n  const currFunc = HEIGHTFUNCS[selectCase]\n\n  const onCaseChange = (caseId: any) => {\n    console.log(\"switch to case \" + caseId);\n    setCurrCase(parseInt(caseId));\n  };\n\n  const handleSubmit = (evt: ChangeEvent, txt: string) => {\n    evt.preventDefault();\n    const data = JSON.parse(txt);\n    processCustData(data);\n  }\n\n  const processCustData = async (inputData: any) => {\n    const pts = await projectGeoData(inputData);\n    let geoFunc = ptsListHeighFn(pts); // generate HeightFunc from geodata list\n    HEIGHTFUNCS['geoFunc'] = geoFunc; // update geoFunc in HEIGHTFUNC catalog\n    // force refresh\n    setCurrCase(0);\n    setCurrCase(currCase);\n  }\n\n  useEffect(() => {\n    // (async () => {\n    //   const pts = await projectGeoData(geoData);  \n    //   let geoFunc = ptsListHeighFn(pts); // generate HeightFunc from geodata list\n    //   HEIGHTFUNCS['geoFunc'] = geoFunc; // update geoFunc in HEIGHTFUNC catalog\n    // })();\n\n  }, [])\n\n  // compute the height arr that will fill canvas\n  const arr: any = Array(W * H).keys();\n  const heightArr = [...arr]\n    .map((elt, i) => new Vector2(i % W, Math.floor(i / W)))\n    .map(pt => currFunc(pt));\n  // .map(v2 => 0.25 + noise(v2) / 2);\n\n  return (\n    <>\n      <InfoOverlay sample={sample} />\n      <CaseSelector\n        items={ALL_CASES}\n        current={currCase}\n        onSelect={onCaseChange}\n      />\n      {selectCase === \"geoFunc\" ? <TextBox handleSubmit={handleSubmit} defaultValue={JSON.stringify(DEFAULT_GEODATA_INPUT, null, 4)} />: \"\"}\n      <CanvasOverlay width={W} height={H} pointsBuff={heightArr} />\n    </>\n  );\n};\n"],"sourceRoot":""}