{"version":3,"sources":["common/constants.ts","samples/index.ts","App.tsx","index.tsx"],"names":["SAMPLE_TYPE","CONTROL_TYPE","BasicDemo","tags","DEMO","Component","lazy","ModelLoader","BoxSplitDemo","TestBoxSplit","TEST","TestRaycastHlp","sampleItems","Object","entries","Samples","reduce","acc","name","item","App","basename","exact","path","component","LoadSample","WelcomePage","items","keys","map","sampleName","i","key","toString","to","match","urlArg","URLSearchParams","useLocation","search","get","caseId","useParams","sample","params","case","arg","Sample","fallback","WEBGL","isWebGL2Available","document","body","appendChild","getWebGL2ErrorMessage","render","getElementById"],"mappings":"ycAAYA,EAKAC,E,8FALAD,O,eAAAA,I,gBAAAA,M,cAKAC,O,iBAAAA,I,0BAAAA,M,KCFZ,IAAMC,EAAY,CAAEC,KAAM,CAACH,EAAYI,MAAOC,UAAWC,gBAAK,kBAAM,uDAC9DC,EAAc,CAAEJ,KAAM,CAACH,EAAYI,MAAOC,UAAWC,gBAAK,kBAAM,8DAChEE,EAAe,CAAEL,KAAM,CAACH,EAAYI,MAAOC,UAAWC,gBAAK,kBAAM,uDACjEG,EAAe,CAAEN,KAAM,CAACH,EAAYU,MAAOL,UAAWC,gBAAK,kBAAM,uDACjEK,EAAiB,CAAER,KAAM,CAACH,EAAYU,MAAOL,UAAWC,gBAAK,kBAAM,uDCMnEM,EAAmBC,OAAOC,QAAQC,GACrCC,QAAO,SAACC,EAAD,0BAAOC,EAAP,KAAaC,EAAb,2BAA6BF,EAA7B,eAAmCC,EAAOC,MAAS,IAWtD,IAAMC,EAAM,WAEjB,OAAQ,oCACN,kBAAC,IAAD,CAAQC,SAAS,yBAEf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,WAAWC,UAAWC,IACxC,kBAAC,IAAD,CAAOF,KAAK,mBAAmBC,UAAWC,QAUrCC,EAAc,WAEzB,IAAsBC,EAKtB,OACE,sFACwD,6BAAM,6BAC5D,yEAFF,IAEuD,6BAErD,6BAVkBA,EAUAf,EATbC,OAAOe,KAAKD,GAAOE,KAAI,SAACC,EAAYC,GAAb,OAAmB,wBAAIC,IAAKD,EAAEE,YAC1D,kBAAC,IAAD,CAAMC,GAAI,IAAMJ,GAAaA,WAkBtBL,EAAa,SAAC,GAAoB,IAAlBU,EAAiB,EAAjBA,MAIvBC,EArDG,IAAIC,gBAAgBC,cAAcC,QAqDtBC,IAAI,WACjBC,EAAWC,cAAXD,OACFE,EAAS,CACXzB,KAAMiB,EAAMS,OAAOD,OAEnBE,KAAMJ,EACNK,IAAKV,GAMDW,EADUnC,EAAY+B,EAAOzB,MACfb,UAEpB,OACE,kBAAC,WAAD,CAAU2C,SAAU,MAClB,kBAACD,EAAD,CAAQJ,OAAQA,OClFY,IAA9BM,IAAMC,qBAENC,SAASC,KAAKC,YAAYJ,IAAMK,yBAIpCC,iBAAO,kBAAC,EAAD,MAASJ,SAASK,eAAe,W","file":"static/js/main.8a1e51db.chunk.js","sourcesContent":["export enum SAMPLE_TYPE{\n    DEMO,\n    TEST\n}\n\nexport enum CONTROL_TYPE {\n    ORBIT,\n    TRANSFORM,\n    // FLY\n}","import { lazy } from 'react'\nimport { SAMPLE_TYPE } from '../common/constants';\n\nconst BasicDemo = { tags: [SAMPLE_TYPE.DEMO], Component: lazy(() => import('./BasicDemo')) };\nconst ModelLoader = { tags: [SAMPLE_TYPE.DEMO], Component: lazy(() => import('./ModelLoader')) };\nconst BoxSplitDemo = { tags: [SAMPLE_TYPE.DEMO], Component: lazy(() => import('../samples/BoxSplitDemo')) };\nconst TestBoxSplit = { tags: [SAMPLE_TYPE.TEST], Component: lazy(() => import('../samples/BoxSplit.test')) };\nconst TestRaycastHlp = { tags: [SAMPLE_TYPE.TEST], Component: lazy(() => import('../samples/RaycastHlp.test')) };\n\nexport {\n  BasicDemo,\n  ModelLoader,\n  BoxSplitDemo,\n  TestBoxSplit,\n  TestRaycastHlp,\n}","import React, { Suspense, useEffect } from 'react';\nimport {\n  Link,\n  useLocation,\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useParams\n} from \"react-router-dom\";\nimport './App.css';\nimport * as Samples from \"./samples\";\n// import { useSampleStates } from './common/states';\n\nconst sampleItems: any = Object.entries(Samples)\n  .reduce((acc, [name, item]) => ({ ...acc, [name]: item }), {})\n\n// A custom hook that builds on useLocation to parse\n// the query string for you.\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\n/**\n * route to sample path and support sampleId\n */\nexport const App = () => {\n\n  return (<>\n    <Router basename=\"/three-react-template\">\n      {/* <Route path=\"/\" component={App} /> */}\n      <Switch>\n        <Route exact path=\"/\">\n          <WelcomePage />\n        </Route>\n        {/* <LoadSample sample={sample} /> */}\n        <Route exact path=\"/:sample\" component={LoadSample} />\n        <Route path=\"/:sample/:caseId\" component={LoadSample} />\n      </Switch>\n    </Router>\n  </>);\n}\n\n/**\n * List all availables samples in the sandbox\n * @param param0 \n */\nexport const WelcomePage = () => {\n\n  const getItemsList = (items: {}) => {\n    return Object.keys(items).map((sampleName, i) => <li key={i.toString()}>\n      <Link to={\"/\" + sampleName}>{sampleName}</Link>\n    </li>);\n  };\n  return (\n    <div>\n      Welcome to ThreeSandbox! a playground for 3D projects <br /><br />\n      <span>Sandbox contains the following samples:</span> <br />\n\n      <ul>{getItemsList(sampleItems)}</ul>\n    </div>\n  )\n};\n\n/**\n * Load a specific sample\n * @param param0 \n * export sample in states\n */\nexport const LoadSample = ({ match }: any) => {\n  // const setSample = useSampleStates(state => state.setSample);\n\n  let query = useQuery();\n  let urlArg = query.get(\"sampArg\");\n  let { caseId } = useParams();\n  var sample = {\n    name: match.params.sample,\n    // type: Number(query.get(\"type\")),\n    case: caseId,\n    arg: urlArg\n  }\n  \n  // setSample(sample); // externalize to Sample States\n\n  var item: any = sampleItems[sample.name];\n  const Sample = item.Component;\n  // sample.type = item.tags[0];\n  return (\n    <Suspense fallback={null}>\n      <Sample sample={sample} />\n    </Suspense>)\n};","import React from 'react';\nimport { render } from 'react-dom'\nimport './index.css';\nimport { WEBGL } from 'three/examples/jsm/WebGL.js';\nimport { App } from './App';\n\nif (WEBGL.isWebGL2Available() === false) {\n\n    document.body.appendChild(WEBGL.getWebGL2ErrorMessage());\n\n}\n\nrender(<App />, document.getElementById('root'));\n\n// import ReactDOM from 'react-dom';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();"],"sourceRoot":""}